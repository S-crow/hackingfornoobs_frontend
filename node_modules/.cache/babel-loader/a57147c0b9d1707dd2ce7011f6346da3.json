{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\hackingfornoobs_frontend\\\\src\\\\components\\\\Pentest.js\";\nimport React from 'react';\n\nclass Pentest extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Qu'est-ce qu'un pentest ?\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"Il s'agit d'un \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"pen\"), \"etration \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"test\"), \" qui consiste \\xE0 se mettre dans la peau d\\u2019un attaquant souhaitant s\\u2019introduire dans le syst\\xE8me d\\u2019information d'une entreprise pour r\\xE9aliser des actions malveillantes (vol, espionnage, sabotage,...).  C'est donc un test d\\u2019intrusion qui vise \\xE0 hacker le r\\xE9seau ou une partie sp\\xE9cifique du r\\xE9seau de mani\\xE8re offensive et plus ou moins r\\xE9aliste pour en remonter les vuln\\xE9rabilit\\xE9s au client afin qu'il puisse les corriger. L\\u2019objectif du pentester est alors multiple et peu varier selon les contextes :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Lister un ensemble d\\u2019informations, trouv\\xE9es d\\u2019une mani\\xE8re ou d\\u2019une autre, et qui peuvent \\xEAtre sensibles ou critiques\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Dresser une liste des vuln\\xE9rabilit\\xE9s ou faiblesses du syst\\xE8me de s\\xE9curit\\xE9 pouvant \\xEAtre exploit\\xE9es\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"D\\xE9montrer qu\\u2019un attaquant potentiel est en capacit\\xE9 de trouver des vuln\\xE9rabilit\\xE9s et de les exploiter pour s\\u2019introduire dans le syst\\xE8me d\\u2019information. Au del\\xE0 des vuln\\xE9rabilit\\xE9s sans relations entre elles, une r\\xE9elle d\\xE9marche vise \\xE0 relever la pr\\xE9sence d\\u2019un plan d\\u2019action amenant de la position d\\u2019un attaquant externe \\xE0 la prise de contr\\xF4le du SI ou la possibilit\\xE9 d\\u2019y effectuer des actions (espionnage, sabotage, etc.)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Tester l\\u2019efficacit\\xE9 des syst\\xE8mes de d\\xE9tection d\\u2019intrusion et la r\\xE9activit\\xE9 de l\\u2019\\xE9quipe de s\\xE9curit\\xE9, et parfois des utilisateurs (social engineering)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Effectuer un reporting et une pr\\xE9sentation finale de son avancement et de ses d\\xE9couvertes au client\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Donner des pistes et conseiller sur les m\\xE9thodes de r\\xE9solution et de correction des vuln\\xE9rabilit\\xE9s d\\xE9couvertes.\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Globalement, il existe deux types de contexte pour l\\u2019ex\\xE9cution d\\u2019un pentest : le pentest en mode Black box et le pentest en mode White Box, et \\xE9galement quelques \\xAB modes \\xBB d\\xE9riv\\xE9s :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Le pentest en mode Black Box : Dans le contexte Black Box, le pentester se met r\\xE9ellement dans la peau d\\u2019un attaquant externe et commence son test d\\u2019intrusion en ayant le moins d\\u2019information possible sur sa cible (sa cible \\xE9tant alors l\\u2019entreprise ayant demand\\xE9 un pentest). En effet, lorsqu\\u2019un asseyant d\\xE9bute son attaque, il ne dispose pas (ou rarement) de la cartographie compl\\xE8te du SI, de la liste des serveurs avec leurs IP, etc. Le contexte Black Box vise donc \\xE0 trouver et \\xE0 d\\xE9montrer la pr\\xE9sence d\\u2019un plan d\\u2019action exploitable par une personne externe permettant de prendre le contr\\xF4le du syst\\xE8me d\\u2019information ou de mettre la main sur certaines informations. En commen\\xE7ant avec tr\\xE8s peu d\\u2019informations, le pentester doit chercher depuis l\\u2019ext\\xE9rieur comment s\\u2019introduire dans le syst\\xE8me cible, il adopte alors la m\\xE9thodologie et le comportement qu\\u2019aurait un pirate r\\xE9el.\")));\n  }\n\n}\n\nexport default Pentest;","map":{"version":3,"sources":["C:/Users/Nico/hackingfornoobs_frontend/src/components/Pentest.js"],"names":["React","Pentest","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AAClCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAlB,eAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/C,+iBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gIAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6fAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qMAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mHALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIANJ,CAJF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2NAbF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,w+BADJ,CAfF,CADF;AAqBD;;AAvBiC;;AA0BpC,eAAeF,OAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Pentest extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Qu'est-ce qu'un pentest ?</h1>\r\n          <hr/>\r\n          <p>Il s'agit d'un <strong>pen</strong>etration <strong>test</strong> qui consiste à se mettre dans la peau d’un attaquant souhaitant s’introduire dans le système d’information d'une entreprise pour réaliser des actions malveillantes (vol, espionnage, sabotage,...).  C'est donc un test d’intrusion qui vise à hacker le réseau ou une partie spécifique du réseau de manière offensive et plus ou moins réaliste pour en remonter les vulnérabilités au client afin qu'il puisse les corriger. L’objectif du pentester est alors multiple et peu varier selon les contextes :</p>\r\n          <ul>\r\n              <li>Lister un ensemble d’informations, trouvées d’une manière ou d’une autre, et qui peuvent être sensibles ou critiques</li>\r\n              <li>Dresser une liste des vulnérabilités ou faiblesses du système de sécurité pouvant être exploitées</li>\r\n              <li>Démontrer qu’un attaquant potentiel est en capacité de trouver des vulnérabilités et de les exploiter pour s’introduire dans le système d’information. Au delà des vulnérabilités sans relations entre elles, une réelle démarche vise à relever la présence d’un plan d’action amenant de la position d’un attaquant externe à la prise de contrôle du SI ou la possibilité d’y effectuer des actions (espionnage, sabotage, etc.)</li>\r\n              <li>Tester l’efficacité des systèmes de détection d’intrusion et la réactivité de l’équipe de sécurité, et parfois des utilisateurs (social engineering)</li>\r\n              <li>Effectuer un reporting et une présentation finale de son avancement et de ses découvertes au client</li>\r\n              <li>Donner des pistes et conseiller sur les méthodes de résolution et de correction des vulnérabilités découvertes.</li>\r\n          </ul>\r\n\r\n          <p>Globalement, il existe deux types de contexte pour l’exécution d’un pentest : le pentest en mode Black box et le pentest en mode White Box, et également quelques « modes » dérivés :</p>\r\n\r\n          <ul>\r\n              <li>Le pentest en mode Black Box : Dans le contexte Black Box, le pentester se met réellement dans la peau d’un attaquant externe et commence son test d’intrusion en ayant le moins d’information possible sur sa cible (sa cible étant alors l’entreprise ayant demandé un pentest). En effet, lorsqu’un asseyant débute son attaque, il ne dispose pas (ou rarement) de la cartographie complète du SI, de la liste des serveurs avec leurs IP, etc. Le contexte Black Box vise donc à trouver et à démontrer la présence d’un plan d’action exploitable par une personne externe permettant de prendre le contrôle du système d’information ou de mettre la main sur certaines informations. En commençant avec très peu d’informations, le pentester doit chercher depuis l’extérieur comment s’introduire dans le système cible, il adopte alors la méthodologie et le comportement qu’aurait un pirate réel.</li>\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Pentest;"]},"metadata":{},"sourceType":"module"}