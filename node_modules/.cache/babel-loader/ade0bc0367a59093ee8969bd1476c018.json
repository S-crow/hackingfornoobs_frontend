{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Nico/hackingfornoobs_frontend/src/components/Kerberos.js\";\nimport React from 'react';\nimport Cerbere from \"../img/kerberos.png\";\nimport KerberosImg from \"../img/kerberos.jpg\";\n\nclass Kerberos extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"article\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"Kerberos\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"En mythologie, Kerberos (plus connu sous le nom de Cerb\\xE8re) est un \\xE9norme chien \\xE0 trois t\\xEAtes qui garde l\\u2019entr\\xE9e des Enfers. Dans le domaine informatique il s'agit du protocole d'authentification dans un r\\xE9seau informatique qui a besoin de 3 entit\\xE9s distinctes pour fonctionner, d'o\\xF9 la r\\xE9f\\xE9rence pour le nom.\"), React.createElement(\"img\", {\n      id: \"cerbere_img\",\n      src: Cerbere,\n      alt: \"sch\\xE9ma Kerberos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Qu'est-ce que Kerberos ?\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Protocole d'authentification des utilisateurs dans un r\\xE9seau d\\xE9velopp\\xE9 par le \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"MIT\"), \", fonctionnant de pair avec un Active Directory, il permet l'acc\\xE8s des utilisateurs \\xE0 des services de mani\\xE8re authentifi\\xE9e.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Le principe de Kerberos est de centraliser la gestion de l'authentification, les identifiants n'ont plus besoin de circuler sur le r\\xE9seau et les serveurs d'en avoir connaissance. Toute l'authentification est g\\xE9r\\xE9e par le \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"KDC (Key Distribution Center)\"), \" suivant 3 \\xE9tapes :\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Authentification\"), \" du client aupr\\xE8s du KDC Authentication Service (AS)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Demande du client d'un \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Ticket de Service\"), \" (TGS)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Acc\\xE8s au service\"), \" en lui fournissant le ticket associ\\xE9\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Principe de fonctionnement\"), React.createElement(\"img\", {\n      id: \"principe_kerberos\",\n      src: KerberosImg,\n      alt: \"sch\\xE9ma Kerberos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Le client demande \\xE0 s'authentifier aupr\\xE8s du Serveur d'Authentification (AS) en demandant un TGT\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Le KDC v\\xE9rifie les donn\\xE9es d\\u2019identification et renvoie en cas de succ\\xE8s au client un TGT\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Le client envoie son TGT au TGS avec le Service Principal Name (SPN) de la ressource \\xE0 laquelle il souhaite acc\\xE9der\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Le KDC v\\xE9rifie le TGT et s\\u2019assure que l\\u2019utilisateur a droit d'acc\\xE8der au service demand\\xE9\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"S'il y est autoris\\xE9, le TGS va alors fournir un ticket de service au client\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Le client pr\\xE9sente son ticket au service concern\\xE9, qui lui accordera l'acc\\xE8s au ressource selon ses privil\\xE8ges\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Dans un environnement Active Directory, les contr\\xF4leurs de domaine (Domain controllers ou DC) jouent le r\\xF4le de KDC et assurent donc les services d'Authentication Server (AS) et de Ticket Granting Service (TGS)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"[Comparaison foireuse] En gros on pourrait comparer le principe de ticketing de Kerberos \\xE0 celui de certains parcs d'attraction : il faut d'abord un ticket d'entr\\xE9e g\\xE9n\\xE9ral pour acc\\xE8der au parc (TGT) avant de faire la demande de tickets sp\\xE9cifiques pour acc\\xE8der \\xE0 chacune des attractions (TGS). A la diff\\xE9rence que dans Kerberos il n'y a ni coupe-file ni fast-pass ;)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Quelle diff\\xE9rence entre Kerberos et NTLM ?\"), \"[D\\xE9finir NTLM]\", React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"La principale diff\\xE9rence entre les deux syst\\xE8mes est la v\\xE9rification tierce partie et le chiffrement plus efficace de Kerberos. Cette \\xE9tape suppl\\xE9mentaire du processus apporte une couche suppl\\xE9mentaire de s\\xE9curit\\xE9 importante par rapport \\xE0 NTLM. Actuellement, la technologie NTLM est obsol\\xE8te et n'assure plus correctement la protection des donn\\xE9es sensibles.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Les attaques sur Kerberos\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Kerberos \\xE9tant la solution la plus d\\xE9ploy\\xE9e pour tout ce qui concerne l'authentification dans un r\\xE9seau d'entreprise il est \\xE9videmment cibles de nombreuses attaques qui peuvent en cas de r\\xE9ussite mener jusqu'\\xE0 la compromission totale du SI. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#spn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Scan des SPN\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Pass-the-ticket : falsification d'une cl\\xE9 de session pour la pr\\xE9senter \\xE0 une ressource sous la forme de donn\\xE9es d\\u2019identification\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#kerberoasting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Kerberoasting\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#asreproasting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"AS-REPRoasting\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#golden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Golden Ticket\"), \" : falsification d'un ticket accordant \\xE0 un utilisateur un acc\\xE8s administrateur du domaine\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#silver\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Silver Ticket\"), \" : falsification d'un ticket donnant acc\\xE8s \\xE0 un service\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Credential stuffing (bruteforce) : tentatives r\\xE9p\\xE9t\\xE9es automatis\\xE9es visant \\xE0 cracker un mot de passe\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Affaiblissement du chiffrement via un Skeleton Key : malware capable de passer outre Kerberos (n\\xE9cessitant un acc\\xE8s admin)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Attaque DCShadow : nouvelle attaque consistant \\xE0 d\\xE9finir son propre contr\\xF4leur de domaine afin de s\\u2019infiltrer plus en profondeur\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"spn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Scan des Service Principal Name (SPN)\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Afin de gagner en furtivit\\xE9 dans un r\\xE9seau en environnement AD, le traditionnel scan de ports est \\xE0 remplacer par un scan SPN. Il s'agit des cha\\xEEnes de caract\\xE8res associ\\xE9es \\xE0 un service qui sont r\\xE9pertori\\xE9es pour chaque compte dans l'annuaire LDAP. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), \" En faisant une requ\\xEAte LDAP sur le DC on peut donc \\xE9num\\xE9rer l'ensemble des services. L'avantage \\xE9tant qu'il n'y a pas besoin d'initier une connexion sur chacun des serveurs h\\xE9bergeant un service. Cette m\\xE9thode, plus discr\\xE8te, peut \\xEAtre r\\xE9aliser sur n'importe quel poste connect\\xE9 \\xE0 l'AD via la commande : \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"setspn.exe\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"kerberoasting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Kerberoasting\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"C'est une attaque qui cible les comptes de services qui sont r\\xE9pertori\\xE9s au niveau de l'annuaire LDAP (SPN). \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \" Le Kerberoasting consiste \\xE0 demander au TGS des tickets de services pour chacun des SPN \\xE9num\\xE9r\\xE9s (r\\xE9cup\\xE9r\\xE9s auparavant via Setspn.exe par exemple), cela n\\xE9cessite \\xE9videmment d'avoir un TGT donc au moins un compte user simple. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), \" Comme chaque ticket de service est chiffr\\xE9 avec une cl\\xE9 correspondant au hash du mot de passe il est ensuite possible de lancer une attaque par bruteforce pour casser le mot de passe du compte cibl\\xE9.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), \"Le script GetUsersSPNs.py d'Impacket permet d'obtenir les hash des mots de passe des comptes de services \\xE0 distance en fournissant l'adresse IP du DC et des creds d'un compte user simple.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"asreproasting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"AS-REPRoasting\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Il existe une pr\\xE9-authentification sur Kerberos qui consiste \\xE0 ajouter \\xE0 la 1ere requete la valeur de l'horodataga chiffr\\xE9e avec la cl\\xE9 du compte utilisateur.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), \"Si elle n'est pas pr\\xE9sente c\\xE0d si le flag \\\"DONT_REQ-AUTH\\\" est pr\\xE9sent dans le champ UserAccountControl d'un compte utilisateur, alors  cela signifie que ce dernier peut faire une demande de TGT sans s'\\xEAtre pr\\xE9-authentifi\\xE9. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), \"L'AS-REPRoasting consiste \\xE0 \\xE9num\\xE9rer l'ensemble des comptes poss\\xE8dant ce flag, de faire une demande de TGT \\xE0 la place de ces utiisateurs pour tenter, en \\\"offline\\\", de casser leur mot de passe.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"GetNPUsers.py\"), \" d'Impacket permet de r\\xE9cup\\xE9rer les hash de ces comptes. [screen]\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"delegation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Delegation d'authentification (sans contrainte)\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Certains serveurs qui poss\\xE8dent le flag \\\"TRUSTED_FOR_DELEGATION\\\" gardent en cache  dans le processus lsass les TGT des utilisateurs pour pouvoir effectuer \\xE0 leur place la demande d'acc\\xE8s \\xE0 un autre service. Ainsi en cas de compromission de l'un de ces serveurs on peut r\\xE9cup\\xE9rer l'ensemble des TGT stock\\xE9s. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), \"L'outil \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"ldapdomaindump\"), \" permet d'\\xE9num\\xE9rer ces machines. [screen]\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), \"On utilise ensuite Mimikatz pour r\\xE9cup\\xE9rer les tickets en m\\xE9moire. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), \"kerberos::list /export [screen]\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"passtheticket\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Pass-The-Ticket\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Cette attaque consiste \\xE0 injecter des TGT pr\\xE9cedemment r\\xE9cup\\xE9r\\xE9s directement dans la m\\xE9moire du processus lsass d'autres machines pour augmenter ses acc\\xE8s.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"golden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Golden Ticket\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Dans un environnement Active Directory, les comptes sont identifi\\xE9s par un nom d\\u2019utilisateur et un mot de passe, l\\u2019utilisateur identifi\\xE9 obtient alors un ticket Kerberos contenant son jeton d\\u2019authentification.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \"Le Golden Ticket est le jeton d\\u2019authentification associ\\xE9 au compte KRBTG, un compte sp\\xE9cial servant \\xE0 chiffrer tous les jetons d\\u2019authentification du DC. Ce Golden Ticket peut \\xEAtre utiliser avec une technique de \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Pass-the-hash\"), \" pour se connecter \\xE0 n\\u2019importe quel compte.\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Infecter une machine cible avec un malware qui permet un premier acc\\xE8s avec un compte utilisateur pour acc\\xE9der \\xE0 d\\u2019autres ressources r\\xE9seau (souvent \\xE0 partir d\\u2019un e-mail de phishing)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Augmenter suffisamment ses privil\\xE8ges pour avoir acc\\xE8s au Contr\\xF4leur de domaine (DC)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Se connecter au DC et dumper le hash du mot de passe du compte KRBTG pour cr\\xE9er un Golden Ticket. (via mimikatz)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Le Golden Ticket permet d'acc\\xE9der \\xE0 toutes les ressources pr\\xE9sentes sur le r\\xE9seau\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"M\\xEAme une modification du mot de passe du compte KRBTG n'entra\\xEEne pas l'invalidation du jeton d\\u2019authentification, donc le Golden Ticket est immuable.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      id: \"silver\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Silver Ticket\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Avec le mot de passe d\\u2019un compte il est possible de l\\u2019utiliser pour cr\\xE9er un faux ticket d\\u2019authentification de service appel\\xE9 \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Silver Ticker\"), \". La cr\\xE9ation de Silver Ticket est possible car Kerberos permet aux services de se connecter sans que la validit\\xE9 de leur jeton ne soit v\\xE9rifi\\xE9e.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), \"[Sean Metcalf] \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \"Un Silver Ticket est un faux ticket d\\u2019authentification utilis\\xE9 pour se connecter \\xE0 certains comptes. Ils sont plus difficiles \\xE0 d\\xE9tecter que les Golden Tickets en raison de l\\u2019absence de communication entre le service et le DC et comme la journalisation se fait en local sur l\\u2019ordinateur cible.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), \"Les tickets Kerberos sont v\\xE9rifi\\xE9s par le Certificat de compte habilit\\xE9 (PAC) mais les comptes de services (comme CIFS ou le pare-feu Windows) ne sont pas toujours v\\xE9rifi\\xE9s.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"Avec un Silver Ticket, on peut s'authentifier aupr\\xE8s du contr\\xF4leur de domaine ou utiliser une technique Pass-the-ticket pour augmenter ses acc\\xE8s.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Contre-mesures\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"mots de passe robustes pour les comptes de service\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"flag \\\"Not_DELEGATED\\\" sur l'attribut UserAccountControol des comptes d'utilisateurs ayant acc\\xE8s \\xE0 des ressources sensibles.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"changement du mot de passe du compte krbtgt 2 fois tous les 40 jours\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"d\\xE9tection d'un nombre trop important de demandes de ticket de service (Kerberoasting)\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Conclusion\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Kerberos est un protocole d'authentification robuste et efficace qui est encore loin d\\u2019\\xEAtre obsol\\xE8te.\"));\n  }\n\n}\n\nexport default Kerberos;","map":{"version":3,"sources":["/mnt/c/Users/Nico/hackingfornoobs_frontend/src/components/Kerberos.js"],"names":["React","Cerbere","KerberosImg","Kerberos","Component","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Cerbere from \"../img/kerberos.png\"\r\nimport KerberosImg from \"../img/kerberos.jpg\"\r\n\r\nclass Kerberos extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"article\">\r\n          <h1>Kerberos</h1>\r\n          <hr/>\r\n          <p className=\"tabulation\">En mythologie, Kerberos (plus connu sous le nom de Cerbère) est un énorme chien à trois têtes qui garde l’entrée des Enfers. Dans le domaine informatique il s'agit du protocole d'authentification dans un réseau informatique qui a besoin de 3 entités distinctes pour fonctionner, d'où la référence pour le nom.</p>\r\n\r\n          <img id=\"cerbere_img\" src={Cerbere} alt=\"schéma Kerberos\"/>\r\n\r\n          <h2>Qu'est-ce que Kerberos ?</h2>\r\n          <p className=\"tabulation\">Protocole d'authentification des utilisateurs dans un réseau développé par le <strong>MIT</strong>, fonctionnant de pair avec un Active Directory, il permet l'accès des utilisateurs à des services de manière authentifiée.</p>\r\n\r\n          <p>Le principe de Kerberos est de centraliser la gestion de l'authentification, les identifiants n'ont plus besoin de circuler sur le réseau et les serveurs d'en avoir connaissance. Toute l'authentification est gérée par le <strong>KDC (Key Distribution Center)</strong> suivant 3 étapes :</p>\r\n          <ol>\r\n            <li><strong>Authentification</strong> du client auprès du KDC Authentication Service (AS)</li>\r\n            <li>Demande du client d'un <strong>Ticket de Service</strong> (TGS)</li>\r\n            <li><strong>Accès au service</strong> en lui fournissant le ticket associé</li>\r\n          </ol>  \r\n\r\n          <br/>\r\n          <hr/>\r\n          <br/>\r\n\r\n          <h2>Principe de fonctionnement</h2>\r\n\r\n          <img id=\"principe_kerberos\" src={KerberosImg} alt=\"schéma Kerberos\"/>\r\n\r\n          <ol>\r\n            <li>Le client demande à s'authentifier auprès du Serveur d'Authentification (AS) en demandant un TGT</li>\r\n            <li>Le KDC vérifie les données d’identification et renvoie en cas de succès au client un TGT</li>\r\n\r\n            <li>Le client envoie son TGT au TGS avec le Service Principal Name (SPN) de la ressource à laquelle il souhaite accéder</li>\r\n\r\n            <li>Le KDC vérifie le TGT et s’assure que l’utilisateur a droit d'accèder au service demandé</li>\r\n\r\n            <li>S'il y est autorisé, le TGS va alors fournir un ticket de service au client</li>\r\n\r\n            <li>Le client présente son ticket au service concerné, qui lui accordera l'accès au ressource selon ses privilèges</li>\r\n          </ol>\r\n\r\n          <p>Dans un environnement Active Directory, les contrôleurs de domaine (Domain controllers ou DC) jouent le rôle de KDC et assurent donc les services d'Authentication Server (AS) et de Ticket Granting Service (TGS)</p>\r\n\r\n\r\n          <p>[Comparaison foireuse] En gros on pourrait comparer le principe de ticketing de Kerberos à celui de certains parcs d'attraction : il faut d'abord un ticket d'entrée général pour accèder au parc (TGT) avant de faire la demande de tickets spécifiques pour accèder à chacune des attractions (TGS). A la différence que dans Kerberos il n'y a ni coupe-file ni fast-pass ;)</p>\r\n\r\n          <br/>\r\n          <hr/>\r\n          <br/>\r\n\r\n          <h2>Quelle différence entre Kerberos et NTLM ?</h2>\r\n\r\n          [Définir NTLM]\r\n\r\n          <p className=\"tabulation\">La principale différence entre les deux systèmes est la vérification tierce partie et le chiffrement plus efficace de Kerberos. Cette étape supplémentaire du processus apporte une couche supplémentaire de sécurité importante par rapport à NTLM.\r\n\r\n          Actuellement, la technologie NTLM est obsolète et n'assure plus correctement la protection des données sensibles.</p>\r\n\r\n          <br/>\r\n          <hr/>\r\n          <br/>\r\n\r\n          <h2>Les attaques sur Kerberos</h2>\r\n          <p>Kerberos étant la solution la plus déployée pour tout ce qui concerne l'authentification dans un réseau d'entreprise il est évidemment cibles de nombreuses attaques qui peuvent en cas de réussite mener jusqu'à la compromission totale du SI. </p>\r\n          <ul>\r\n            <li><a href=\"#spn\">Scan des SPN</a></li>\r\n            <li>Pass-the-ticket : falsification d'une clé de session pour la présenter à une ressource sous la forme de données d’identification</li>\r\n            <li><a href=\"#kerberoasting\">Kerberoasting</a></li>\r\n            <li><a href=\"#asreproasting\">AS-REPRoasting</a></li>\r\n            <li><a href=\"#golden\">Golden Ticket</a> : falsification d'un ticket accordant à un utilisateur un accès administrateur du domaine</li>\r\n            <li><a href=\"#silver\">Silver Ticket</a> : falsification d'un ticket donnant accès à un service</li>\r\n            <li>Credential stuffing (bruteforce) : tentatives répétées automatisées visant à cracker un mot de passe</li>\r\n            <li>Affaiblissement du chiffrement via un Skeleton Key : malware capable de passer outre Kerberos (nécessitant un accès admin)\r\n            </li>\r\n            <li>Attaque DCShadow : nouvelle attaque consistant à définir son propre contrôleur de domaine afin de s’infiltrer plus en profondeur</li>\r\n          </ul>\r\n          \r\n\r\n          <br/>\r\n          <hr id=\"spn\"/>\r\n          <br/>\r\n\r\n          <h3>Scan des Service Principal Name (SPN)</h3>\r\n\r\n          <p className=\"tabulation\">Afin de gagner en furtivité dans un réseau en environnement AD, le traditionnel scan de ports est à remplacer par un scan SPN. Il s'agit des chaînes de caractères associées à un service qui sont répertoriées pour chaque compte dans l'annuaire LDAP. <br/><br/> En faisant une requête LDAP sur le DC on peut donc énumérer l'ensemble des services. L'avantage étant qu'il n'y a pas besoin d'initier une connexion sur chacun des serveurs hébergeant un service. Cette méthode, plus discrète, peut être réaliser sur n'importe quel poste connecté à l'AD via la commande : <strong>setspn.exe</strong></p>\r\n\r\n          <br/>\r\n          <hr id=\"kerberoasting\"/>\r\n          <br/>\r\n\r\n          <h3>Kerberoasting</h3>\r\n          <p className=\"tabulation\">C'est une attaque qui cible les comptes de services qui sont répertoriés au niveau de l'annuaire LDAP (SPN). <br/> Le Kerberoasting consiste à demander au TGS des tickets de services pour chacun des SPN énumérés (récupérés auparavant via Setspn.exe par exemple), cela nécessite évidemment d'avoir un TGT donc au moins un compte user simple. <br/> Comme chaque ticket de service est chiffré avec une clé correspondant au hash du mot de passe il est ensuite possible de lancer une attaque par bruteforce pour casser le mot de passe du compte ciblé. \r\n          <br/><br/> \r\n          Le script GetUsersSPNs.py d'Impacket permet d'obtenir les hash des mots de passe des comptes de services à distance en fournissant l'adresse IP du DC et des creds d'un compte user simple.</p>\r\n\r\n          <br/>\r\n          <hr id=\"asreproasting\"/>\r\n          <br/>\r\n\r\n          <h3>AS-REPRoasting</h3>\r\n\r\n          <p className=\"tabulation\">Il existe une pré-authentification sur Kerberos qui consiste à ajouter à la 1ere requete la valeur de l'horodataga chiffrée avec la clé du compte utilisateur.<br/>\r\n          Si elle n'est pas présente càd si le flag \"DONT_REQ-AUTH\" est présent dans le champ UserAccountControl d'un compte utilisateur, alors  cela signifie que ce dernier peut faire une demande de TGT sans s'être pré-authentifié. <br/><br/>\r\n\r\n          L'AS-REPRoasting consiste à énumérer l'ensemble des comptes possèdant ce flag, de faire une demande de TGT à la place de ces utiisateurs pour tenter, en \"offline\", de casser leur mot de passe.<br/><br/>\r\n\r\n          <strong>GetNPUsers.py</strong> d'Impacket permet de récupérer les hash de ces comptes.\r\n          [screen]</p>\r\n\r\n          <br/>\r\n          <hr id=\"delegation\"/>\r\n          <br/>\r\n\r\n          <h3>Delegation d'authentification (sans contrainte)</h3>\r\n\r\n          <p className=\"tabulation\">Certains serveurs qui possèdent le flag \"TRUSTED_FOR_DELEGATION\" gardent en cache  dans le processus lsass les TGT des utilisateurs pour pouvoir effectuer à leur place la demande d'accès à un autre service. Ainsi en cas de compromission de l'un de ces serveurs on peut récupérer l'ensemble des TGT stockés. <br/><br/>\r\n\r\n          L'outil <strong>ldapdomaindump</strong> permet d'énumérer ces machines. \r\n          [screen]\r\n\r\n          <br/><br/>\r\n\r\n          On utilise ensuite Mimikatz pour récupérer les tickets en mémoire. <br/>\r\n          kerberos::list /export\r\n          [screen]\r\n          </p>\r\n\r\n          <br/>\r\n          <hr id=\"passtheticket\"/>\r\n          <br/>\r\n\r\n          <h3>Pass-The-Ticket</h3>\r\n\r\n          <p className=\"tabulation\">Cette attaque consiste à injecter des TGT précedemment récupérés directement dans la mémoire du processus lsass d'autres machines pour augmenter ses accès.</p>\r\n\r\n          <br/>\r\n          <hr id=\"golden\"/>\r\n          <br/>\r\n\r\n          <h3>Golden Ticket</h3>\r\n\r\n          <p className=\"tabulation\">Dans un environnement Active Directory, les comptes sont identifiés par un nom d’utilisateur et un mot de passe, l’utilisateur identifié obtient alors un ticket Kerberos contenant son jeton d’authentification.<br/><br/>\r\n\r\n          Le Golden Ticket est le jeton d’authentification associé au compte KRBTG, un compte spécial servant à chiffrer tous les jetons d’authentification du DC. Ce Golden Ticket peut être utiliser avec une technique de <strong>Pass-the-hash</strong> pour se connecter à n’importe quel compte.\r\n          </p>\r\n\r\n          <ol>\r\n            <li>Infecter une machine cible avec un malware qui permet un premier accès avec un compte utilisateur pour accéder à d’autres ressources réseau (souvent à partir d’un e-mail de phishing)</li>\r\n            <li>Augmenter suffisamment ses privilèges pour avoir accès au Contrôleur de domaine (DC)</li>\r\n            <li>Se connecter au DC et dumper le hash du mot de passe du compte KRBTG pour créer un Golden Ticket. (via mimikatz)</li>\r\n            <li>Le Golden Ticket permet d'accéder à toutes les ressources présentes sur le réseau</li>\r\n          </ol>\r\n\r\n          <p>Même une modification du mot de passe du compte KRBTG n'entraîne pas l'invalidation du jeton d’authentification, donc le Golden Ticket est immuable.</p>\r\n\r\n          <br/>\r\n          <hr id=\"silver\"/>\r\n          <br/>\r\n\r\n          <h3>Silver Ticket</h3>\r\n\r\n          <p className=\"tabulation\">Avec le mot de passe d’un compte il est possible de l’utiliser pour créer un faux ticket d’authentification de service appelé <strong>Silver Ticker</strong>. La création de Silver Ticket est possible car Kerberos permet aux services de se connecter sans que la validité de leur jeton ne soit vérifiée.<br/><br/>\r\n\r\n          [Sean Metcalf] <br/><br/>\r\n          \r\n          Un Silver Ticket est un faux ticket d’authentification utilisé pour se connecter à certains comptes. Ils sont plus difficiles à détecter que les Golden Tickets en raison de l’absence de communication entre le service et le DC et comme la journalisation se fait en local sur l’ordinateur cible.<br/><br/>\r\n\r\n          Les tickets Kerberos sont vérifiés par le Certificat de compte habilité (PAC) mais les comptes de services (comme CIFS ou le pare-feu Windows) ne sont pas toujours vérifiés.<br/><br/>\r\n\r\n          Avec un Silver Ticket, on peut s'authentifier auprès du contrôleur de domaine ou utiliser une technique Pass-the-ticket pour augmenter ses accès. \r\n          </p>\r\n\r\n          <br/>\r\n          <hr/>\r\n          <br/>\r\n\r\n          <h3>Contre-mesures</h3>\r\n\r\n          <ul>\r\n            <li>mots de passe robustes pour les comptes de service</li>\r\n            <li>flag \"Not_DELEGATED\" sur l'attribut UserAccountControol des comptes d'utilisateurs ayant accès à des ressources sensibles.</li>\r\n            <li>changement du mot de passe du compte krbtgt 2 fois tous les 40 jours</li>\r\n            <li>détection d'un nombre trop important de demandes de ticket de service (Kerberoasting)</li>\r\n          </ul>\r\n\r\n          <br/>\r\n          <hr/>\r\n          <br/>\r\n          \r\n          <h3>Conclusion</h3>\r\n\r\n          <p className=\"tabulation\">Kerberos est un protocole d'authentification robuste et efficace qui est encore loin d’être obsolète.</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Kerberos;  "]},"metadata":{},"sourceType":"module"}