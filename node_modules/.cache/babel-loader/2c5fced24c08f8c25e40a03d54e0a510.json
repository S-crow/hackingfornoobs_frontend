{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\hackingfornoobs_frontend\\\\src\\\\components\\\\SneakyMercury.js\";\nimport React from 'react';\nimport Fuzzbunch from \"../img/fuzzbunch.jpg\";\nimport Eternalblue from \"../img/eternalblue.PNG\";\nimport Help from \"../img/help_sneakymercury.PNG\";\nimport Demo from \"../img/demo_sneakymercury.PNG\";\nimport Interactive from \"../img/interactive.PNG\";\nimport NSA from \"../img/nsa.svg\";\nimport Flow from \"../img/flow.PNG\";\nimport EternalblueSuccess from \"../img/eternalbluesuccess.jpg\";\n\nclass SneakyMercury extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"article\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Projet SneakyMercury\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"(Post-exploitation dans les r\\xE9seaux Windows)\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#projet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Le projet\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#PTH\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Pass-The-Hash\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#smb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Le protocole SMB\")))), React.createElement(\"div\", {\n      className: \"sneakymercury\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Etat de l'art : Shadow Brokers Leak\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Ces derni\\xE8res ann\\xE9es ont vu l'\\xE9mergence de cyberattaques de plus en plus sophistiqu\\xE9es. Les attaquants comme les agences gouvernementales se servent d'outils customs d\\xE9velopp\\xE9s en interne, qui sont parfois sujet \\xE0 des fuites publiques.\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), \"L'une d'elles a particuli\\xE8rement marqu\\xE9 les esprits, le \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Shadow Brokers Leak,\"), \" qui contenait les exploits et outils utilis\\xE9s par la NSA (National Security Agency) et en particulier ceux concernant le \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"protocole SMB\"), \". Ces exploits d\\xE9nomm\\xE9s EternalBlue, EternalChampion, EternalRomance et EternalSynergy ont \\xE9t\\xE9 ensuite r\\xE9-impl\\xE9ment\\xE9s dans des campagnes d'attaques comme le ransomware \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"WannaCry\"), \". \"), React.createElement(\"img\", {\n      id: \"nsa\",\n      src: NSA,\n      alt: \"NSA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Le contexte g\\xE9n\\xE9ral\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Le leak des Shadow Brokers est une s\\xE9rie de 2 fuites d\\u2019outils de la NSA survenues en Ao\\xFBt 2016 et Avril 2017. Ces leaks contenaient plusieurs exploits et outils qui furent vol\\xE9s semble-t-il \\xE0 \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"l\\u2019Equation Group ,\"), \" le groupe op\\xE9rationnel cyber de la NSA. Cela inclut notamment le fameux exploit \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"EternalBlue\"), \" qui n'a eu de cesse depuis de faire parler de lui. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Les Shadows Brokers annonc\\xE8rent publiquement la fuite le 13 ao\\xFBt 2016 sur plusieurs sites et forums comme teaser de la future fuite d'autres outils qu\\u2019ils avaient \\xE9galement en leur possession. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Finalement le 14 avril 2017 fut release le dossier \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Lost in Translation\"), \" . En 2017, plusieurs cyberattaques ont \\xE9t\\xE9 lanc\\xE9es apr\\xE8s cet \\xE9v\\xE9nement, notamment les fameux ransomwares WannaCry et NotPetya. \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Les outils de la NSA : FuzzBunch, DoublePulsar et Danderspritz\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"La premi\\xE8re partie de notre stage consistait en l\\u2019\\xE9tude des diff\\xE9rents outils de la NSA, nous nous sommes particuli\\xE8rement concentr\\xE9s sur 3 outils : \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"FUZZBUNCH :\"), \" Framework comparable \\xE0 Metasploit. G\\xE9n\\xE9ralement utilis\\xE9 pour g\\xE9n\\xE9rer des payloads customs (charge utile servant \\xE0 infecter une machine cible).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"DOUBLEPULSAR :\"), \" Payload utilis\\xE9 avec les exploits SMB. Il s\\u2019agit d\\u2019une backdoor7 qui offre des fonctionnalit\\xE9s comme l\\u2019injection de DLL8 ou l\\u2019ex\\xE9cution de code malveillant sur les machines infect\\xE9es. Il est utilis\\xE9 pour installer PeddleCheap qui est un listener9 qui se connecte en retour \\xE0 Danderspritz. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"DANDERSPRITZ :\"), \" Framework graphique de post-exploitation, il couvre entre autre la reconnaissance, la d\\xE9couverte du r\\xE9seau, la d\\xE9tection d\\u2019antivirus, l\\u2019extraction de donn\\xE9es, la persistance et plein d\\u2019autres fonctionnalit\\xE9s. \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Parmi les diff\\xE9rentes fonctionnalit\\xE9s :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Monitoring des services sur la machine victime\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"R\\xE9cup\\xE9ration d\\u2019informations sur les drivers\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Liste des logiciels et des services en cours d\\u2019ex\\xE9cution\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Liste des antivirus pr\\xE9sents\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Gestion de netstat\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Dump de mots de passe \"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Afin de faciliter le monitoring des h\\xF4tes infect\\xE9s, plusieurs options sont disponibles pour pr\\xE9venir et alerter les analystes\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Danderspritz offre \\xE9galement des modules d\\xE9di\\xE9s \\xE0 l\\u2019Active Directory (\\xE9num\\xE9ration des utilisateurs, des partages r\\xE9seau, etc) et aux mouvements lat\\xE9raux.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"R\\xE9sum\\xE9 d'une attaque lanc\\xE9e \\xE0 partir de ces outils :\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"La victime est infect\\xE9e avec la backdoor \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Doublepulsar\"), \" via un exploit (\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"EternalBlue\"), \" par exemple)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Le listener \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"PeddleCheap\"), \" est lanc\\xE9 dans l\\u2019interface graphique \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Danderspritz\"), \".\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"PeddleCheap est upload\\xE9 via la backdoor DoublePulsar.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"PeddleCheap est ex\\xE9cut\\xE9 et se connecte au listener\")), \"[Diagramme Post-exploitation NSA]\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"D\\xE9monstration des outils \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"L\\u2019interface de base de Fuzzbunch est assez user-friendly : \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"fuzzbunch\",\n      src: Fuzzbunch,\n      alt: \"Fuzzbunch d\\xE9mo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"a\", {\n      href: \"https://www.digital.security/fr/blog/dans-la-boite-outils-dequation-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"article Digital Security sur l'Equation Group\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Apr\\xE8s avoir renseign\\xE9 certains champs, comme l\\u2019adresse IP cible ou le port d\\u2019\\xE9coute, on peut lancer des plugins qui s\\u2019organisent en diff\\xE9rentes cat\\xE9gories :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Reconnaissance\"), \" (fingerprinting) et check des vuln\\xE9rabilit\\xE9s exploitables sur la cible : Rpctouch, Smbtouch, et d\\u2019autres outils de reconnaissance \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Exploitation de vuln\\xE9rabilit\\xE9s\"), \" : Emeraldthread ou la suite Eternal*\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Post-exploitation\"), \" apr\\xE8s infection de l\\u2019h\\xF4te : DouplePulsar \")), \"RpcTouch permet de r\\xE9aliser un fingerprinting de la cible, Smbtouch en plus de r\\xE9cup\\xE9rer la version et l\\u2019architecture du syst\\xE8me d\\u2019exploitation remonte directement les vuln\\xE9rabilit\\xE9s exploitables sur la machine cible.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Dans cet exemple, la cible est vuln\\xE9rable \\xE0 3 exploits. Avec l\\u2019exploit EternalBlue on obtient l'output :\"), React.createElement(\"img\", {\n      id: \"eternalblue_img\",\n      src: Eternalblue,\n      alt: \"eternalblue success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"L\\u2019attaque a r\\xE9ussi, et n\\u2019aura pris qu\\u2019un peu plus de 10 secondes. EternalBlue exploite un buffer overflow au niveau de la stack SMB, l\\u2019impl\\xE9mentation se fait au niveau du Kernel Windows. Apr\\xE8s on peut d\\xE9poser une backdoor sur la cible. \"), React.createElement(\"a\", {\n      href: \"https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"D\\xE9tails de l'exploit\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      id: \"projet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Projet SneakyMercury \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Mise en place d'un lab\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"La mise en place d\\u2019un lab \\xE9tait n\\xE9cessaire au projet afin de pouvoir tester l'outil dans un environnement restreint et contr\\xF4l\\xE9. La plupart des entreprises de s\\xE9curit\\xE9 disposent de laboratoires virtuels comme celui-ci, certains sont \\xE9galement disponibles \\xE0 l\\u2019achat. Nous avons choisi de mettre en place l'architecture d'un r\\xE9seau standard d\\u2019entreprise, \\xE0 savoir un environnement Active Directory avec des serveurs (Windows Server) et des machines clientes (32bits et 64bits). Pour la machine attaquante, on se sert d\\u2019une machine virtuelle (VM) Kali Linux. \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Active Directory\"), \" - Collection de services pour la gestion des groupes, des utilisateurs et des machines. Les utilisateurs et les machines sont regroup\\xE9s dans des domaines (ici testinfra.fr) Tous les services sont g\\xE9r\\xE9s par un unique serveur, \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"le Domain Controller (DC)\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"DNS\"), \" - Service n\\xE9cessaire pour le fonctionnement de l\\u2019Active Directory. l'AD se fie \\xE0 une s\\xE9rie d\\u2019enregistrements DNS pour \\xE9tablir quels services sont disponibles sur le domaine et ce qu\\u2019ils fournissent. Ces enregistrements sont g\\xE9r\\xE9s automatiquement.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"LDAP\"), \" - (Lightweight Directory Access Protocol) Annuaire de gestion des utilisateurs pr\\xE9sents sur le r\\xE9seau. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Kerberos\"), \" - Service cl\\xE9 responsable de tout ce qui est authentification sur le domaine. Avec le SSO (Single Sign On) il est possible d'utiliser les m\\xEAmes identifiants pour se connecter sur tous les ordinateurs du domaine.\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"L\\u2019ensemble de ces services sont installables lors de la mise en place d\\u2019un Active Directory :\"), React.createElement(\"a\", {\n      href: \"https://www.psattack.com/articles/20160718/setting-up-an-active-directory-lab-part-1/ \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Mise en place d'un AD\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Un outil de post-exploitation pour les r\\xE9seaux Windows\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"L\\u2019objectif de ce projet est de d\\xE9velopper un nouvel outil opensource afin d\\u2019automatiser la phase de mouvement lat\\xE9ral dans un environnement r\\xE9seau Windows avec Active Directory. L'outil devra \\xEAtre comparable en termes de fonctionnalit\\xE9s \\xE0 l\\u2019outil existant CrackMapExec (CME) mais il devra \\xEAtre d\\xE9velopp\\xE9 en RUST plut\\xF4t qu\\u2019en Python comme c'est le cas pour CME.\"), React.createElement(\"a\", {\n      href: \"https://github.com/byt3bl33d3r/CrackMapExec \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"github de CrackMapExec\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Rust est un langage relativement r\\xE9cent d\\xE9velopp\\xE9 par la fondation Mozilla mais qui poss\\xE8de d\\xE9j\\xE0 de nombreux contributeurs sur GitHub.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Les avantages d\\u2019un d\\xE9veloppement en RUST ?\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Facilit\\xE9 de d\\xE9ploiement\"), \" : Pas besoin d\\u2019environnement d\\u2019ex\\xE9cution (portable et multiplateforme), pas de d\\xE9pendance, on compile le programme vers un binaire ex\\xE9cutable qu\\u2019on peut d\\xE9ployer sur le r\\xE9seau cible.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Rapidit\\xE9\"), \" : Rust est un langage bas niveau, tr\\xE8s optimis\\xE9 par rapport au langage Python \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"S\\xE9curit\\xE9\"), \" : Rust combine programmation bas niveau avec s\\xFBret\\xE9 m\\xE9moire, (pas de garbage collector). Le compilateur garantit que le code est memory safe. La syntaxe du langage et les v\\xE9rifications du compilateur emp\\xEAchent \\xE9norm\\xE9ment d\\u2019erreurs, pas d\\u2019overflow ni de race condition ou autres corruptions m\\xE9moire.\"))), React.createElement(\"ul\", {\n      id: \"list-links\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \" https://doc.rust-lang.org/book/ \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Rust Book\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://doc.rust-lang.org/rust-by-example/ \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Rust by example\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://aml3.github.io/RustTutorial/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Rust in 7 programs\")), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \" https://llogiq.github.io/2015/07/30/traits.html \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Rust built-in traits\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Cahier des charges pour l\\u2019outil :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Authentification sur le r\\xE9seau Windows : NTLM, Kerberos, Bruteforce de comptes \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"\\xC9num\\xE9ration : de partages r\\xE9seaux, d'utilisateurs, de groupes et d\\u2019autres informations utiles.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Commandes : Upload/Download de fichiers, shell interactif des fonctionnalit\\xE9s de l\\u2019outil \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Ex\\xE9cution de code \\xE0 distance : PSExec et LOLBAS (Living Off The Land Binaries And Scripts), ensemble de techniques furtives qui se servent des ex\\xE9cutables l\\xE9gitimes pr\\xE9sents sur le syst\\xE8me.\"))), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"D\\xE9veloppement d\\u2019une biblioth\\xE8que SMB en Rust\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Contrairement \\xE0 CrackMapExec (CME) qui pouvait compter sur la biblioth\\xE8que SMB en Python d\\u2019Impacket, Rust \\xE9tant un langage relativement r\\xE9cent, il n\\u2019y a pas de biblioth\\xE8que SMB d\\xE9j\\xE0 exitante. La principale difficult\\xE9 a donc \\xE9t\\xE9 la r\\xE9impl\\xE9mentation from scratch du protocole SMB en Rust. Il s\\u2019agissait de comprendre le protocole, les m\\xE9canismes de gestion de l\\u2019authentification sous Windows et de recrafter chaque paquet pour effectuer telle ou telle action.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"SMB (Server Message Block) est le protocole des partages Windows, il inclut notamment :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"L\\u2019acc\\xE8s aux Partages r\\xE9seau (shares)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"La gestion des imprimantes \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"L\\u2019administration de machines distantes \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"La lecture et l\\u2019\\xE9criture de fichiers \"))), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"SMB peut \\xE9galement fonctionner comme protocole de transport avec d\\u2019autres protocoles r\\xE9seau Windows. Par exemple le protocole Windows Remote Procedure Call (DCE RPC) permet la communication interprocess. Les diff\\xE9rents processus peuvent \\xEAtre sur la m\\xEAme machine, sur le m\\xEAme r\\xE9seau local ou m\\xEAme selon la configuration, \\xE0 travers le net. Cela nous permet donc l\\u2019ex\\xE9cution de code \\xE0 distance, le management de services ou la gestion ou la modification de cl\\xE9s de registres Windows.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Pour impl\\xE9menter la 1\\xE8re biblioth\\xE8que SMB libre en RUST nous nous sommes bas\\xE9s sur Impacket qui en propose d\\xE9j\\xE0 une existante en Python et sur la documentation de Microsoft associ\\xE9e au protocole SMB.\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Utilisation de l\\u2019outil\"), React.createElement(\"div\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"SneakyMercury est un outil en CLI, l\\u2019interface offre un shell int\\xE9ractif. Quand l\\u2019utilisateur lance l\\u2019outil il acc\\xE8de au menu d\\u2019aide lui indiquant les options \\xE0 fournir (IP cible, nom d\\u2019utilisateur, mot de passe, nom de domaine) \\u2192 Les commandes shell, script et db sont alors disponibles\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"shell ouvre un shell int\\xE9ractif avec un menu d\\u2019aide plus sp\\xE9cifique\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"script permet \\xE0 un utilisateur de lancer ses propres scripts\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"db g\\xE8re en background une base de donn\\xE9es contenant les credentials d\\xE9j\\xE0 r\\xE9cup\\xE9r\\xE9s (fonctionnalit\\xE9 non impl\\xE9ment\\xE9e)\"))), React.createElement(\"img\", {\n      id: \"help\",\n      src: Help,\n      alt: \"menu d'aide sneakymercury\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"L\\u2019outil traite l\\u2019authentification NTLMv2 et retourne un message de connexion ou d\\u2019erreur. L\\u2019utilisateur connect\\xE9 acc\\xE8de alors \\xE0 la liste des commandes disponibles.\"), React.createElement(\"img\", {\n      id: \"demo\",\n      src: Demo,\n      alt: \"demo sneakymercury\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"G\\xE9n\\xE9ralement la commande suivante est \\xAB Connect \\xBB qui va permettre la connexion \\xE0 un partage r\\xE9seau (share). Par d\\xE9faut, il y a 3 partages r\\xE9seau, visibles uniquement par l\\u2019administrateur du domaine ou l\\u2019administrateur local. Pour pouvoir monter ces partages r\\xE9seau il faut avoir les droits administrateur sur le syst\\xE8me.\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"C$ (Disque C)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"ADMIN$ = C:/Windows/\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"IPC$\")), \"$=cach\\xE9\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"IPC$ est un partage sp\\xE9cial permettant la communication interprocess. Il ne permet pas d\\u2019acc\\xE9der directement \\xE0 des fichiers ou des dossiers comme les autres partages r\\xE9seau mais il fournit une interface de communication avec les autres processus en cours d\\u2019ex\\xE9cution sur le syst\\xE8me (Remote Procedure Call : DCERPC). En fait $IPC expose les named pipes11 sur lesquels on peut alors \\xE9crire ou lire pour communiquer avec les processus. Chaque data qui est \\xE9crite sur un named pipe est envoy\\xE9e au processus distant et inversement chaque data \\xE9crite par un processus sera accessible \\xE0 partir du named pipe associ\\xE9. Une fois connect\\xE9 au partage r\\xE9seau l\\u2019utilisateur peut lister les fichiers ou se d\\xE9placer dans les diff\\xE9rents dossiers \\xE0 la recherche de donn\\xE9es sensibles.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Exploration des partages r\\xE9seau et commandes Powershell \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"On peut \\xE9galement ex\\xE9cuter des commandes arbitraires sur la cible gr\\xE2ce \\xE0 la commande PowerShell :\"), React.createElement(\"img\", {\n      id: \"interactif\",\n      src: Interactive,\n      alt: \"sneakymercury interactif\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Download de fichiers ou upload de codes malveillants\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"La fonctionnalit\\xE9 impl\\xE9ment\\xE9e suivante est l\\u2019Upload/Download de fichiers. Cela peut permettre \\xE0 l\\u2019utilisateur de r\\xE9cup\\xE9rer les fichiers int\\xE9ressants en local avec la commande download, ou alternativement d'uploader ses propres fichiers ou ex\\xE9cutables via la commande upload.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Pour impl\\xE9menter cette fonctionnalit\\xE9 nous nous sommes inspir\\xE9s de l\\u2019upload utilis\\xE9 par CrackMapExec (CME).\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"D\\xE9tails upload CME :\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Premi\\xE8re \\xE9tape, connexion au share o\\xF9 l\\u2019on veut uploader (ex : ADMIN$)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Cr\\xE9ation d\\u2019un fichier (Create Request File) \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Ecriture du fichier, on bufferise les donn\\xE9es pour les envoyer en boucle si n\\xE9cessaire (Write Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Fermeture (Close Request)\")), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Le sch\\xE9ma pr\\xE9sente les \\xE9tapes pour ouvrir un fichier sur la machine distante, y \\xE9crire, et le fermer. On fait l\\u2019hypoth\\xE8se qu\\u2019une connexion authentifi\\xE9e est d\\xE9j\\xE0 \\xE9tablie avant l\\u2019envoi de ces paquets, l\\u2019\\xE9tablissement de la session et la connexion au partage r\\xE9seau ont donc d\\xE9j\\xE0 eu lieu :\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"[Diagramme d'un upload]\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"La premi\\xE8re requ\\xEAte permet la cr\\xE9ation d'un fichier sur la machine distante. La seconde va initialiser certaines m\\xE9tadonn\\xE9es du fichier comme sa taille. On envoie des requ\\xEAtes d\\u2019\\xE9criture dans lesquelles on bufferise les data \\xE0 transmettre, et l\\u2019on boucle jusqu\\u2019\\xE0 la fin du fichier source. Une derni\\xE8re requ\\xEAte permet la fermeture du fichier distant. L\\u2019upload est alors termin\\xE9.\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Enum\\xE9ration des utilisateurs, des domaines et des sessions\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Si l\\u2019objectif est la reconnaissance locale ou sur le domaine, l\\u2019utilisateur peut utiliser les commandes \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"domains\"), \" ou \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"users\"), \". Elles listent respectivement les domaines auxquels les utilisateurs peuvent se connecter, et les utilisateurs enregistr\\xE9s. D\\u2019autre part si elle est utilis\\xE9e sur un Contr\\xF4leur de Domaine, la commande users peut lister tous les utilisateurs du domaine :  \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"[Diagramme liste users]\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Cette fonctionnalit\\xE9 est bas\\xE9e sur le protocole \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"SAMR\"), \" (Security Account Manager Remote) avec les requ\\xEAtes suivantes :\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Connect request\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"EnumDomains\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"LookupDomain\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"OpenDomain\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"EnumDomainUsers\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"OpenUser\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"QueryUserInfo2\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Close request \"))), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Une requ\\xEAte va initialiser la connexion, la suivante liste les domaines, on parse alors la r\\xE9ponse pour se concentrer sur un domaine en particulier. On ouvre ce domaine et une requ\\xEAte va r\\xE9aliser l\\u2019\\xE9num\\xE9ration des utilisateurs sur celui-ci. Enfin on peut r\\xE9cup\\xE9rer certaines informations sp\\xE9cifiques \\xE0 un utilisateur, avant de fermer avec la derni\\xE8re requ\\xEAte\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"La capture Wireshark ci-dessous pr\\xE9sente les requ\\xEAtes SAMR dans l\\u2019ordre logique pour lister les utilisateurs.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"[Diagramme wireshark \\xE9num users\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Pour notre projet nous avons analys\\xE9 les paquets en utilisant WireShark (logiciel d\\u2019\\xE9coute passive et de capture de paquets r\\xE9seau). Afin d\\u2019impl\\xE9menter une action particuli\\xE8re (comme l\\u2019\\xE9num\\xE9ration des utilisateurs), il faut envoyer au serveur les paquets dans un ordre pr\\xE9cis, avec des param\\xE8tres corrects et les valeurs correspondantes. On a donc du diss\\xE9quer le protocole pour comprendre les fonctions des diff\\xE9rents paquets ainsi que les effets des diff\\xE9rents param\\xE8tres.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Wireshark et les tests unitaires ont permis de d\\xE9celer les \\xE9ventuelles erreurs de valeurs dans les param\\xE8tres des paquets ou dans le parsing des r\\xE9ponses. Cette m\\xE9thodologie pour construire les paquets, les envoyer sur le r\\xE9seau et parser les r\\xE9ponses, reste valable quelque soit le protocole \\xE9tudi\\xE9.\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Fonctionnalit\\xE9s additionnelles\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Windows Remote Code Execution \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Plusieurs m\\xE9thodes sont possibles pour l\\u2019ex\\xE9cution de code \\xE0 distance sous Windows :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Remote Service Control Manager (Named pipe : svcctl)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Task Scheduler (atexec)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Windows Management Instrumentation (WMI)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Remote Registry\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Remote File Access\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Remote Desktop (RDP)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Windows Remote Management\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"MMC20.Application (DCOM) \"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Ces diff\\xE9rentes m\\xE9thodes sont expliqu\\xE9es dans ce lien :\"), React.createElement(\"a\", {\n      href: \"https://support.microsoft.com/en-us/help/942817/how-to-change-the-remote-uaclocalaccounttokenfilterpolicy-registry-se\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"M\\xE9thodes d'ex\\xE9cution de code \\xE0 distance\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Pour ce projet l\\u2019ex\\xE9cution de code \\xE0 distance se fait via le protocole \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"SCMR\"), \" (Service Control Manager Remote Protocol) en se basant sur \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Psexec\"), \" de \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"SysInternals\"), \".\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"L\\u2019utilisation de commandes internes propres \\xE0 Windows (l\\xE9gitimes) permet d\\u2019\\xE9viter d\\u2019\\xE9crire des fichiers sur le disque (Fileless) donc est une m\\xE9thode plus discr\\xE8te pour \\xE9viter les d\\xE9tections via des m\\xE9canismes comme l\\u2019AMSI (Antimalware Scan Interface) ou les sondes IDS\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Smb-exec (utilis\\xE9 par CME) permet \\xE9galement d\\u2019ex\\xE9cuter du code sur des h\\xF4tes distants. Parmi ses fonctionnalit\\xE9s :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Dump de hash12 sur les serveurs et machines\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Enregistrement des registres HKLM (HKEY_LOCAL_MACHINE) et de la base SAM (Security Account Manager)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Recherche de fichiers int\\xE9ressants (ex : unattended.xml contenant souvent des mots de passe en clair)\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Il a \\xE9galement l\\u2019avantage d\\u2019\\xEAtre peu d\\xE9tect\\xE9 en comparaison des payloads du framework Metasploit (bas\\xE9 sur psexec de SysInternals). \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"github de smbexec\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"D\\xE9tails de Smb-exec:\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Premi\\xE8re \\xE9tape, connexion \\xE0 IPC$ et cr\\xE9ation svcctl (Create Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"R\\xE9cup\\xE9ration du Context Handle (Open SC Manager Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Cr\\xE9ation d\\u2019un Named service sp\\xE9cifiant la commande \\xE0 ex\\xE9cuter dans le path du binaire (Create Service Request). Cette commande redirige l'output vers des fichiers temporaires qui seront t\\xE9l\\xE9charg\\xE9s ensuite.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"D\\xE9marrage du service (Start Service)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Lecture de l'output \\xE9crite dans le fichier temporaire (Read Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Suppression du service (Delete Service) \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Fermeture de l\\u2019handle attribu\\xE9 (Close Handle Request)\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Psexec (d\\xE9velopp\\xE9 par SysInternals), il s\\u2019agit d\\u2019un outil d\\u2019administration \\xE0 distance de Windows, qui a longtemps \\xE9t\\xE9 l\\u2019outil favori pour tous les mouvements lat\\xE9raux dans un environnement Active Directory. Il utilise le protocole SMB pour se connecter \\xE0 une machine distante et y lancer un ex\\xE9cutable. En principe, il cr\\xE9e un \\xAB named pipe \\xBB qui permet d\\u2019ex\\xE9cuter de mani\\xE8re interactive des commandes avec RemComSvc. En r\\xE9alit\\xE9 il les ex\\xE9cute localement puis exporte les r\\xE9sultats \\xE0 travers SMB. Bien qu\\u2019il soit encore utilis\\xE9 de mani\\xE8re l\\xE9gitime pour effectuer des t\\xE2ches d\\u2019administration il facilite grandement la t\\xE2che aux attaquants. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Voici l\\u2019explication d\\xE9taill\\xE9e tir\\xE9e du blog rapid7 : \\u201DPSExec has a Windows Service image inside of its executable. It takes this service and deploys it to the Admin share on the remote machine. It then uses the DCE/RPC interface over SMB to access the Windows Service Control Manager API. It turns on the PSExec service on the remote machine. The PSExec service then creates a named pipe that can be used to send commands to the system.\\u201D \"), React.createElement(\"a\", {\n      href: \"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Documentation Microsoft Psexec\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"https://blog.rapid7.com/2013/03/09/psexec-demystified/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Explications Psexec additionnelles\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"D\\xE9tails des \\xE9tapes de Psexec : \"), \"Comparable \\xE0 Smbexec mais diff\\xE8re dans le fait qu\\u2019il upload toujours un fichier sur la machine distante.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Cr\\xE9ation de psexecsvc.exe sur le share $ADMIN (Create Request File)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"\\xC9criture sur psexcsv de la commande \\xE0 ex\\xE9cuter sur le fichier local ou des data du binaire \\xE0 uploader (Write Request) \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Connexion \\xE0 SCMR via DCERPC (Bind Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"R\\xE9cup\\xE9ration du context handle \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Cr\\xE9ation du service, chiffr\\xE9 sous Wireshark (Create Service Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Fermeture du service (Close Service Handle Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Commande (Open Service Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"D\\xE9marrage du service (Start Service Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Requ\\xEAte le statut du service (Query Service Status Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Cr\\xE9ation de PSEXESVC (Create Request File)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"R\\xE9cup\\xE9ration d\\u2019information (Info Request/ IOCTL Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"\\xC9criture des data (Write Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Lecture des data (Read Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Cr\\xE9ation du fichier pour stdin (Create Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Cr\\xE9ation du fichier pour stdout (Create Request)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Cr\\xE9ation du fichier pour stderr (Create Request)\")), \"Apr\\xE8s chaque commande : \\xE9criture sur stdin (Write Request) et lecture sur stdout (Read Request)\", React.createElement(\"img\", {\n      id: \"flow\",\n      src: Flow,\n      alt: \"flowgraph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      id: \"PTH\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Pass The Hash (PTH)\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"L\\u2019utilisateur peut \\xE9galement choisir de s\\u2019authentifier en utilisant un hash de mot de passe (NTLMv2), cela permet tout ce qui est attaque du type Pass-The-Hash. Les m\\xE9canismes d'authentification sont bas\\xE9s sur un mot de passe que la plupart du temps les utilisateurs ne doivent saisir qu'une seule et unique fois. Ce dernier sera hash\\xE9 et c\\u2019est ce hash qui sera utilis\\xE9 par la suite.  Ainsi pour un attaquant cela revient au m\\xEAme de conna\\xEEtre la valeur du hash ou bien le mot de passe lui-m\\xEAme. Une attaque Pass-The-Hash facilite grandement les intrusions dans un r\\xE9seau dans la mesure o\\xF9 m\\xEAme les mots de passe d\\u2019une grande complexit\\xE9 peuvent \\xEAtre facilement contourn\\xE9s.\"), React.createElement(\"a\", {\n      href: \"https://www.melani.admin.ch/melani/fr/home/documentation/rapports/rapportstechniques/attaques--pass-the-hash-.html \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"documentation pass the hass\"), React.createElement(\"a\", {\n      href: \"https://attack.stealthbits.com/pass-the-hash-attack-explained \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"explications pass the hash\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Par ailleurs, les attaques Pass-The-Hash sont tr\\xE8s difficiles \\xE0 d\\xE9tecter au niveau du r\\xE9seau car il est complexe de savoir quel utilisateur devrait \\xEAtre loggu\\xE9 sur telle machine et de pratiquer une politique de s\\xE9curit\\xE9 assez fiable pour savoir \\xE0 tout moment quels comptes ont droit d\\u2019acc\\xE8s \\xE0 telle ressource.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Null Session\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Il s\\u2019agit d\\u2019une vuln\\xE9rabilit\\xE9 classique dans les r\\xE9seaux Windows qui consiste \\xE0 se connecter en connexion anonyme \\xE0 un partage r\\xE9seau cach\\xE9 IPC$ (share r\\xE9seau utilis\\xE9 pour les communications interprocess). Cela permet ainsi de r\\xE9cup\\xE9rer de nombreuses informations sur la configuration de la machine, les utilisateurs, les noms des partages r\\xE9seau, et m\\xEAme de modifier des parties du registre de la machine distante.\"), React.createElement(\"a\", {\n      href: \"https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"lien1\"), React.createElement(\"a\", {\n      href: \"https://www.beyondsecurity.com/scan_pentest_network_vulnerabilities_null_session_availab lesmb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"lien2\"), React.createElement(\"a\", {\n      href: \"http://smallvoid.com/article/winnt-null-session.html\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"lien3\"), React.createElement(\"a\", {\n      href: \"https://www.youtube.com/watch?v=VvX7JHzzSA8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"lien4\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Pour utiliser la nulle session dans notre outil, il faut changer un flag lors de la n\\xE9gociation de session (afin de rendre la connexion anonyme) et supprimer toutes les r\\xE9ponses au challenge.\"), \"Pour d\\xE9sactiver la nulle session sous Windows, il suffit de modifier le registre comme suit : \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), \"HKEY\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), \"\\u2013 RestrictAnonymous = 1 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), \"\\u2013 Restrict AnonymousSAM = 1 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), \"\\u2013 EveryoneIncludesAnonymous = 0 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"On peut \\xE9galement limiter ses acc\\xE8s aux partages r\\xE9seau en ajoutant un champ \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"RestrictNullSessAccess\"), \"de valeur 1 dans la cl\\xE9 de registre suivante :\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      style: {\n        'font-size': '9px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\LanManServer\\\\Parameters\")), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"Bruteforce de mots de passe\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Pour g\\xE9rer le bruteforce de mots de passe au niveau de l\\u2019authentification SMB on a impl\\xE9ment\\xE9 l'utilisation d'une liste de noms d\\u2019utilisateurs/mots de passe plut\\xF4t qu\\u2019un mot de passe unique afin de tester l\\u2019authentification pour une liste sp\\xE9cifique de cible. Lorsque des identifiants valides sont trouv\\xE9s ils sont automatiquement ajout\\xE9s dans la base de donn\\xE9es qui devrait \\xE0 terme recenser tous les identifiants trouv\\xE9s sur le r\\xE9seau au cours du pentest, y compris les identifiants dans les fichiers des partages r\\xE9seaux (ce qui est arrive fr\\xE9quemment).\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"EternalBlue, EternalChampion, EternalSynergy et EternalRomance\"), \"MS17-010 contient les exploits d\\xE9velopp\\xE9s par la NSA qui ciblent Microsoft Windows, ces exploits ont notamment \\xE9t\\xE9 r\\xE9-impl\\xE9ment\\xE9s dans les ransomware WannaCry et NotPetya.\", React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"CVE-2017-0146 (EternalChampion/EternalSynergy) : exploite une race condition avec les Transaction requests\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"CVE-2017-0143 (EternalRomance/EternalSynergy) : exploite une confusion de type entre WriteAndX et Transaction requests \")), \"Sous Metasploit : exploit/windows/smb/ms17_010_psexec\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"1. Le pare feu doit permettre le trafic SMB\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"2. La cible doit utiliser la version du protocole SMBv1\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"3. Il ne doit pas y avoir la mise \\xE0 jour du patch de la MS17-010\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"4. La connexion anonyme \\xE0 l\\u2019IPC$ et au named pipe doivent \\xEAtre autoris\\xE9es\")), React.createElement(\"img\", {\n      id: \"eternalbluesuccess\",\n      src: EternalblueSuccess,\n      alt: \"exploit eternalblue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"EternalBlue ne n\\xE9cessite pas d\\u2019\\xEAtre authentifi\\xE9. EternalRomance, EternalSynergy et EternalChampion permettent d\\u2019obtenir une session administrateur \\xE0 partir d\\u2019un compte aux privil\\xE8ges limit\\xE9s. Dans le cadre du projet, EternalBlue a \\xE9t\\xE9 impl\\xE9ment\\xE9 en Rust afin de pouvoir l\\u2019int\\xE9grer dans l\\u2019outil. \"), React.createElement(\"h2\", {\n      id: \"smb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Protocole Server Message Block (SMB)\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Pr\\xE9sentation\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Il existe plusieurs versions de la suite protocolaire Microsoft SMB : SMB 1, SMB 2.0, SMB 2.1, SMB 3.0, SMB 3.0.2, SMB 3.1.1\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), \"  Les versions SMB 2.X et SMB 3.X sont assez proches mais radicalement diff\\xE9rents de la version SMB1. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), \"Ce projet s\\u2019est concentr\\xE9 sur l\\u2019impl\\xE9mentation de SMB2.1, le tableau suivant pr\\xE9sente les versions du protocole SMB associ\\xE9es aux diff\\xE9rents syst\\xE8mes d\\u2019exploitation : \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"SMB peut \\xEAtre impl\\xE9ment\\xE9 sur le TCP ou via NETBIOS. Ce projet se concentre sur le SMB over TCP (Direct Hosted SMB). Les paquets seront craft\\xE9s de mani\\xE8re \\xE0 indiquer que le protocole est lanc\\xE9 over TCP avec un header qui pr\\xE9cisera \\xE0 chaque fois l\\u2019action \\xE0 r\\xE9aliser et donc la nature des data qui suivent. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"Pour notre projet nous nous sommes concentr\\xE9s sur la version SMB2.1 utilisant le header SYNC packets, et uniquement du cot\\xE9 client. Pour se faire nous nous sommes inspir\\xE9s du client smb d\\u2019Impacket ainsi que de la documentation de Windows. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"En mode sync, un thread lance une op\\xE9ration I/O et entre imm\\xE9diatement dans une phase d\\u2019attente jusqu\\u2019\\xE0 ce que la requ\\xEAte I/O soit achev\\xE9e. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Le header SMB (SYNC) se pr\\xE9sente comme suit : \"), \"[Diagramme header SMB]\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"4 premiers octets : identification du protocole SMB2 SMB2:0x424d53fe \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, \"2 suivants : taille du header\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"2 octets : Credit Charge  0x0000 (valeur fournie par le client au serveur et limite le nombre de requ\\xEAtes exceptionnelles qu\\u2019un client peut envoyer au serveur)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"2 octets : Channel Sequence 0x0000\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"2 octets : Reserved, 0x0000\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"2 octets : Command (l\\u2019un des param\\xE8tres les plus importants car il d\\xE9crit le type de paquet qui va \\xEAtre envoy\\xE9) \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"2 octets : Credits requested \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"4 octets : flags\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), \"- requ\\xEAte : 0x00000000 \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), \"- r\\xE9ponse : 0x00000001\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"8 octets : message ID \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), \"    - incr\\xE9mentation \\xE0 partir de 0 pour chaque requ\\xEAte envoy\\xE9e \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), \" - logique de suivi au niveau paquets de la communication SMB\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"4 octets : Process ID - 0x0000feff \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"4 octets : Tree ID \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), \" - 0x00 jusqu\\u2019\\xE0 la requ\\xEAte tree connect  \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), \"- 0x01 puis \\xE9gal \\xE0 1 apr\\xE8s connexion\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"8 octets : Session ID \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), \"- 0x00 jusqu\\u2019\\xE0 la requ\\xEAte session setup, apr\\xE8s identifie la session\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, \"16 octets : Signature ID \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), \"  - utilis\\xE9 si le paquet est sign\\xE9 \")), React.createElement(\"a\", {\n      href: \"https://msdn.microsoft.com/en-us/library/cc246529.aspx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"documentation source\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Pour les messages, il a fallu les crafter de z\\xE9ro en s\\u2019inspirant de la documentation Microsoft et du code d\\u2019Impacket, voici les diff\\xE9rents paquets relatifs au protocole SMB que l\\u2019on a pu impl\\xE9menter au cours du projet : \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"Negotiate: message initial, n\\xE9gociation pour l\\u2019authentification\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"Session Setup: m\\xE9canisme authentification\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"Tree Connect/Disconnect: demande de connexion \\xE0 un Partage r\\xE9seau\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Logoff: message pour la d\\xE9connexion \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"Read: message de lecture de data \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Write: message d\\u2019\\xE9criture de data \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"Create: message d\\u2019acc\\xE8s/de cr\\xE9ation/de suppression d\\u2019un fichier\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Query Directory: r\\xE9cup\\xE9ration d\\u2019information sur un dossier \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, \"Get Info: r\\xE9cup\\xE9ration d\\u2019informations sur les fichiers et/ou autres objets \")), \"Gr\\xE2ce \\xE0 ces paquets on a ainsi pu impl\\xE9menter les fonctionnalit\\xE9s suivantes :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"Ouverture et fermeture d\\u2019une connexion SMB \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \" Authentification (combin\\xE9 avec l\\u2019impl\\xE9mentation Windows GSS-API/NTLMSSP) \\u2192 Login \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Connexion \\xE0 un partage r\\xE9seau \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, \"Liste des partages r\\xE9seau \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"D\\xE9placement dans les dossiers d\\u2019un partage \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, \"Upload d\\u2019un fichier sur un partage \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"Download d\\u2019un fichier pr\\xE9sent sur un partage \")), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Authentification\"), \"Le graphe suivant donne une vue d\\u2019ensemble du processus d\\u2019authentification SMB2 (login) : [Diagrammme authentification SMB2]\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Dans le premier paquet le client re\\xE7oit le token GSS du serveur. Il s\\u2019agit d\\u2019un spnego qui est utilis\\xE9 pour choisir le type d\\u2019authentification qui interviendra entre le client et le serveur.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, \"SPNEGO est une sp\\xE9cification standard d\\xE9finie dans Simple and Protected GSS-API Negotiation Mechanism, et est en charge de l\\u2019authentification permettant l'acc\\xE8s \\xE0 une ressource s\\xE9curis\\xE9e identifi\\xE9e dans la requ\\xEAte HTTP.\"), \"Le spnego inclut les param\\xE8tres :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"mechtypes : qui d\\xE9crit les m\\xE9canismes de s\\xE9curit\\xE9 disponibles \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"mechtoken : le token relatif \\xE0 la session \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"d\\u2019autres informations\")), \"Dans le cas d\\u2019une session NTLM, le client va initier un nouveau spnego en envoyant un spnegoinit et un Negociate message.\", React.createElement(\"a\", {\n      href: \"https://msdn.microsoft.com/en-us/library/cc246561.aspx \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, \"https://msdn.microsoft.com/en-us/library/cc246561.aspx\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"Pour ce qui est du projet l\\u2019impl\\xE9mentation a \\xE9t\\xE9 largement inspir\\xE9e dans un premier temps par la biblioth\\xE8que \\xAB WinAuth \\xBB en Rust afin de g\\xE9n\\xE9rer le challenge/response n\\xE9cessaire \\xE0 l\\u2019authentification, mais la d\\xE9cision a \\xE9t\\xE9 prise par la suite de r\\xE9\\xE9crire ce code afin que cela corresponde davantage \\xE0 nos besoins. \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"Pour le moment, l\\u2019authentification peut \\xEAtre faite localement, sur un contr\\xF4leur de domaine, via un mot de passe ou par Pass-The-Hash. Un bruteforce des users/passwords a \\xE9galement \\xE9t\\xE9 impl\\xE9ment\\xE9 il suffit de fournir une simple wordlist pour que les identifiants soient test\\xE9s.\"), React.createElement(\"a\", {\n      href: \"https://github.com/steffengy/winauth-rs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"biblioth\\xE8que winaut\"), React.createElement(\"a\", {\n      href: \"http://blog.gentilkiwi.com/tag/ntlm \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Doc NTLM\"), \"Lors d\\u2019une authentification NTLM il y a plusieurs possibilit\\xE9s, elle peut \\xEAtre g\\xE9r\\xE9e par :\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"Pas d\\u2019authentification (Null authentication)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"LMv1 ou LMv2 : un simple hash de mots de passe clients\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"NTLMv1 ou NTLMv2 : incluant un challenge du serveur (protection contre le rejeu) \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, \"NTLM 2 : NTLMV1 am\\xE9lior\\xE9 \")), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, \"Le choix est laiss\\xE9 au client. Les serveurs les plus anciens peuvent encore accepter LM, c\\u2019est pourquoi aujourd\\u2019hui la plupart des clients envoie n\\xE9cessairement les deux, des r\\xE9ponses LM et NTLM. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }), \" La configuration sp\\xE9cifique (des clients et des serveurs) d\\xE9pend de certaines valeurs de cl\\xE9s de registre. Donc il n\\u2019y a pas moyen de savoir \\xE0 l\\u2019avance (\\xE0 l\\u2019exception d\\u2019une reconnaissance pr\\xE9alable des versions OS ou fingerprinting) quels types de r\\xE9ponses seront accept\\xE9es par le serveur. Cela explique pourquoi LM est encore envoy\\xE9 malgr\\xE9 son faible niveau de s\\xE9curit\\xE9. En particulier le choix entre NTLMv1 et NTLMv2 ne d\\xE9pend pas des flags n\\xE9goci\\xE9s. \"), \"Pour plus de d\\xE9tails voir les liens :\", React.createElement(\"a\", {\n      style: {\n        \"font-size\": \"9px\"\n      },\n      href: \"http://davenport.sourceforge.net/ntlm.html#type3MessageExample\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"http://davenport.sourceforge.net/ntlm.html#type3MessageExample\"), React.createElement(\"p\", {\n      className: \"tabulation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, \"NTLM a \\xE9t\\xE9 largement supplant\\xE9 par le protocole d\\u2019authentification Kerberos pour tout ce qui est authentification dans un domaine. C\\u2019est un proc\\xE9d\\xE9 d\\u2019authentification plus moderne et robuste, il n\\xE9cessite un Ticket Granting Server (TGS) pour fonctionner, g\\xE9n\\xE9ralement sur le Contr\\xF4leur de Domaine. Contrairement \\xE0 NTLM, l\\u2019authentification Kerberos est s\\xE9par\\xE9e de SMB, et implique des int\\xE9ractions entre le TGS et le service auquel on essaie d\\u2019acc\\xE9der. Kerberos est stateless, ce qui permet des attaques comme le Golden Ticket. C\\u2019est un proc\\xE9d\\xE9 d\\u2019authentification bas\\xE9 sur le sch\\xE9ma en Tiers-de-confiance, il ne peut pas \\xEAtre utilis\\xE9 dans toutes les situations. Par exemple lorsque les serveurs ne font pas parti du domaine, ou pour des comptes locaux, ou pour l\\u2019acc\\xE8s \\xE0 des ressources sur un domaine non fiable. NTLM continuera encore pour un moment \\xE0 \\xEAtre le m\\xE9canisme d\\u2019authentification le plus utilis\\xE9. \"), React.createElement(\"a\", {\n      href: \"https://blog. https://blog.varonis.fr/explication-de-lauthentificationkerberos/devensys.com/kerberos-principe-de-fonctionnement/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, \"Principe Kerberos\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"Pour la gestion de l\\u2019authentification, le paquet suivant est envoy\\xE9 pour sp\\xE9cifier les versions SMB support\\xE9es par le client, ainsi que d\\u2019autres informations (signature requise par exemple) \"), \"[Diagramme Negociate Request]\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"Dans le paquet Negociate Response, une erreur est retourn\\xE9e si le statut n\\u2019est pas STATUT_SUCCESS. G\\xE9n\\xE9ralement, le serveur envoie un negtokeninit dans un message spnego, et c\\u2019est au client de l\\u2019accepter ou d\\u2019en redemander un nouveau avec une session set up request.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"Signature/ Chiffrement\")));\n  }\n\n}\n\nexport default SneakyMercury;","map":{"version":3,"sources":["C:/Users/Nico/hackingfornoobs_frontend/src/components/SneakyMercury.js"],"names":["React","Fuzzbunch","Eternalblue","Help","Demo","Interactive","Flow","EternalblueSuccess","SneakyMercury","Component","render","NSA"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Fuzzbunch from \"../img/fuzzbunch.jpg\"\r\nimport Eternalblue from \"../img/eternalblue.PNG\"\r\nimport Help from \"../img/help_sneakymercury.PNG\"\r\nimport Demo from \"../img/demo_sneakymercury.PNG\"\r\nimport Interactive from \"../img/interactive.PNG\"\r\nimport NSA from \"../img/nsa.svg\"\r\nimport Flow from \"../img/flow.PNG\"\r\nimport EternalblueSuccess from \"../img/eternalbluesuccess.jpg\"\r\n\r\n\r\nclass SneakyMercury extends React.Component {\r\n    render() {\r\n      return (\r\n      <div className=\"article\">\r\n        <h1>Projet SneakyMercury</h1>\r\n        <h2>(Post-exploitation dans les réseaux Windows)</h2>\r\n\r\n        <hr/>\r\n        <div>\r\n          <ul>\r\n            <li><a href=\"#projet\">Le projet</a></li>\r\n            <li><a href=\"#PTH\">Pass-The-Hash</a></li>\r\n            <li><a href=\"#smb\">Le protocole SMB</a></li>\r\n          </ul>  \r\n        </div>\r\n        <div className=\"sneakymercury\">\r\n            <h3>Etat de l'art : Shadow Brokers Leak</h3>\r\n\r\n            <p className=\"tabulation\">Ces dernières années ont vu l'émergence de cyberattaques de plus en plus sophistiquées. Les attaquants comme les agences gouvernementales se servent d'outils customs développés en interne, qui sont parfois sujet à des fuites publiques.<p/> \r\n            <p className=\"tabulation\"></p>L'une d'elles a particulièrement marqué les esprits, le <strong>Shadow Brokers Leak,</strong> qui contenait les exploits et outils utilisés par la NSA (National Security Agency) et en particulier ceux concernant le <strong>protocole SMB</strong>. Ces exploits dénommés EternalBlue, EternalChampion, EternalRomance et EternalSynergy ont été ensuite ré-implémentés dans des campagnes d'attaques comme le ransomware <strong>WannaCry</strong>. </p>\r\n\r\n            <img id=\"nsa\" src={NSA} alt=\"NSA\"/>\r\n            \r\n            <h4>Le contexte général</h4>\r\n            <p className=\"tabulation\">Le leak des Shadow Brokers est une série de 2 fuites d’outils de la NSA survenues en Août 2016 et Avril 2017. Ces leaks contenaient plusieurs exploits et outils qui furent volés semble-t-il à <strong>l’Equation Group ,</strong> le groupe opérationnel cyber de la NSA. Cela inclut notamment le fameux exploit <strong>EternalBlue</strong> qui n'a eu de cesse depuis de faire parler de lui. </p>\r\n            <p>Les Shadows Brokers annoncèrent publiquement la fuite le 13 août 2016 sur plusieurs sites et forums comme teaser de la future fuite d'autres outils qu’ils avaient également en leur possession. </p>\r\n            <p>Finalement le 14 avril 2017 fut release le dossier <strong>Lost in Translation</strong> . En 2017, plusieurs cyberattaques ont été lancées après cet événement, notamment les fameux ransomwares WannaCry et NotPetya. </p><br/>\r\n            \r\n            <h4>Les outils de la NSA : FuzzBunch, DoublePulsar et Danderspritz</h4>\r\n            <p>La première partie de notre stage consistait en l’étude des différents outils de la NSA, nous nous sommes particulièrement concentrés sur 3 outils : </p>\r\n            \r\n            <p><strong>FUZZBUNCH :</strong> Framework comparable à Metasploit. Généralement utilisé pour générer des payloads customs (charge utile servant à infecter une machine cible).</p>\r\n            <p><strong>DOUBLEPULSAR :</strong> Payload utilisé avec les exploits SMB. Il s’agit d’une backdoor7 qui offre des fonctionnalités comme l’injection de DLL8 ou l’exécution de code malveillant sur les machines infectées. Il est utilisé pour installer PeddleCheap qui est un listener9 qui se connecte en retour à Danderspritz. </p>\r\n            <p><strong>DANDERSPRITZ :</strong> Framework graphique de post-exploitation, il couvre entre autre la reconnaissance, la découverte du réseau, la détection d’antivirus, l’extraction de données, la persistance et plein d’autres fonctionnalités. </p>\r\n            \r\n            <div>Parmi les différentes fonctionnalités : \r\n                <ul>\r\n                    <li>Monitoring des services sur la machine victime</li>\r\n                    <li>Récupération d’informations sur les drivers</li>\r\n                    <li>Liste des logiciels et des services en cours d’exécution</li>\r\n                    <li>Liste des antivirus présents</li>\r\n                    <li>Gestion de netstat</li>\r\n                    <li>Dump de mots de passe </li>\r\n                </ul>\r\n            </div>\r\n            <p>Afin de faciliter le monitoring des hôtes infectés, plusieurs options sont disponibles pour prévenir et alerter les analystes</p>\r\n            <p>Danderspritz offre également des modules dédiés à l’Active Directory (énumération des utilisateurs, des partages réseau, etc) et aux mouvements latéraux.</p>       \r\n            <div>Résumé d'une attaque lancée à partir de ces outils :\r\n              <ol>\r\n                <li>La victime est infectée avec la backdoor <strong>Doublepulsar</strong> via un exploit (<strong>EternalBlue</strong> par exemple)</li> \r\n                <li>Le listener <strong>PeddleCheap</strong> est lancé dans l’interface graphique <strong>Danderspritz</strong>.</li>\r\n                <li>PeddleCheap est uploadé via la backdoor DoublePulsar.</li>\r\n                <li>PeddleCheap est exécuté et se connecte au listener</li>  \r\n              </ol>\r\n            [Diagramme Post-exploitation NSA]\r\n            </div>\r\n            <h4>Démonstration des outils </h4>\r\n            <p>L’interface de base de Fuzzbunch est assez user-friendly : </p>\r\n            <div><img id=\"fuzzbunch\" src={Fuzzbunch} alt=\"Fuzzbunch démo\"></img></div>\r\n            <a href=\"https://www.digital.security/fr/blog/dans-la-boite-outils-dequation-group\">article Digital Security sur l'Equation Group</a>\r\n            <div>Après avoir renseigné certains champs, comme l’adresse IP cible ou le port d’écoute, on peut lancer des plugins qui s’organisent en différentes catégories :  \r\n              <ul>\r\n                <li><strong>Reconnaissance</strong> (fingerprinting) et check des vulnérabilités exploitables sur la cible : Rpctouch, Smbtouch, et d’autres outils de reconnaissance </li>\r\n                <li><strong>Exploitation de vulnérabilités</strong> : Emeraldthread ou la suite Eternal*</li>\r\n                <li><strong>Post-exploitation</strong> après infection de l’hôte : DouplePulsar </li>\r\n              </ul>\r\n              RpcTouch permet de réaliser un fingerprinting de la cible, Smbtouch en plus de récupérer la version et l’architecture du système d’exploitation remonte directement les vulnérabilités exploitables sur la machine cible.\r\n            </div>\r\n            <p>Dans cet exemple, la cible est vulnérable à 3 exploits.\r\n            Avec l’exploit EternalBlue on obtient l'output : \r\n            </p>\r\n            <img id=\"eternalblue_img\" src={Eternalblue} alt=\"eternalblue success\"></img>\r\n            <p>L’attaque a réussi, et n’aura pris qu’un peu plus de 10 secondes. EternalBlue exploite un buffer overflow au niveau de la stack SMB, l’implémentation se fait au niveau du Kernel Windows. Après on peut déposer une backdoor sur la cible. </p>\r\n            <a href=\"https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue\">Détails de l'exploit</a>\r\n            \r\n            <hr/>\r\n\r\n            <h3 id=\"projet\">Projet SneakyMercury </h3>\r\n            <h4>Mise en place d'un lab</h4>\r\n            <p className=\"tabulation\">La mise en place d’un lab était nécessaire au projet afin de pouvoir tester l'outil dans un environnement restreint et contrôlé. La plupart des entreprises de sécurité disposent de laboratoires virtuels comme celui-ci, certains sont également disponibles à l’achat. \r\n \r\n            Nous avons choisi de mettre en place l'architecture d'un réseau standard d’entreprise, à savoir un environnement Active Directory avec des serveurs (Windows Server) et des machines clientes (32bits et 64bits). Pour la machine attaquante, on se sert d’une machine virtuelle (VM) Kali Linux. </p>\r\n            <ul>\r\n              <li><strong>Active Directory</strong> - Collection de services pour la gestion des groupes, des utilisateurs et des machines. Les utilisateurs et les machines sont regroupés dans des domaines (ici testinfra.fr)\r\n              \r\n              Tous les services sont gérés par un unique serveur, <strong>le Domain Controller (DC)</strong></li>\r\n              <li><strong>DNS</strong> - Service nécessaire pour le fonctionnement de l’Active Directory. l'AD se fie à une série d’enregistrements DNS pour établir quels services sont disponibles sur le domaine et ce qu’ils fournissent. Ces enregistrements sont gérés automatiquement.</li>\r\n              <li><strong>LDAP</strong> - (Lightweight Directory Access Protocol) Annuaire de gestion des utilisateurs présents sur le réseau. </li>\r\n              <li><strong>Kerberos</strong> - Service clé responsable de tout ce qui est authentification sur le domaine. Avec le SSO (Single Sign On) il est possible d'utiliser les mêmes identifiants pour se connecter sur tous les ordinateurs du domaine.</li>\r\n            </ul>\r\n\r\n            <p>L’ensemble de ces services sont installables lors de la mise en place d’un Active Directory :</p>\r\n            <a href=\"https://www.psattack.com/articles/20160718/setting-up-an-active-directory-lab-part-1/ \">Mise en place d'un AD</a>\r\n\r\n            <h4>Un outil de post-exploitation pour les réseaux Windows</h4>\r\n            <p className=\"tabulation\">L’objectif de ce projet est de développer un nouvel outil opensource afin d’automatiser la phase de mouvement latéral dans un environnement réseau Windows avec Active Directory. L'outil devra être comparable en termes de fonctionnalités à l’outil existant CrackMapExec (CME) mais il devra être développé en RUST plutôt qu’en Python comme c'est le cas pour CME.</p>\r\n            <a href=\"https://github.com/byt3bl33d3r/CrackMapExec \">github de CrackMapExec</a>\r\n            <p>Rust est un langage relativement récent développé par la fondation Mozilla mais qui possède déjà de nombreux contributeurs sur GitHub.</p>\r\n            <div>Les avantages d’un développement en RUST ? \r\n              <ul>\r\n                <li><strong>Facilité de déploiement</strong> : Pas besoin d’environnement d’exécution (portable et multiplateforme), pas de dépendance, on compile le programme vers un binaire exécutable qu’on peut déployer sur le réseau cible.</li>\r\n                <li><strong>Rapidité</strong> : Rust est un langage bas niveau, très optimisé par rapport au langage Python </li>  \r\n                <li><strong>Sécurité</strong> : Rust combine programmation bas niveau avec sûreté mémoire, (pas de garbage collector). Le compilateur garantit que le code est memory safe. La syntaxe du langage et les vérifications du compilateur empêchent énormément d’erreurs, pas d’overflow ni de race condition ou autres corruptions mémoire.</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <ul id=\"list-links\">\r\n              <li><a href=\" https://doc.rust-lang.org/book/ \">Rust Book</a></li>\r\n              <li><a href=\"https://doc.rust-lang.org/rust-by-example/ \">Rust by example</a></li>\r\n              <li><a href=\"https://aml3.github.io/RustTutorial/\">Rust in 7 programs</a></li>\r\n              <li><a href=\" https://llogiq.github.io/2015/07/30/traits.html \">Rust built-in traits</a></li>\r\n            </ul>      \r\n            <div>Cahier des charges pour l’outil :\r\n              <ul>\r\n                  <li>Authentification sur le réseau Windows : NTLM, Kerberos, Bruteforce de comptes </li>\r\n                  <li>Énumération : de partages réseaux, d'utilisateurs, de groupes et d’autres informations utiles.</li>\r\n                  <li>Commandes : Upload/Download de fichiers, shell interactif des fonctionnalités de l’outil </li>\r\n                  <li>Exécution de code à distance : PSExec et LOLBAS (Living Off The Land Binaries And Scripts), ensemble de techniques furtives qui se servent des exécutables légitimes présents sur le système.</li>\r\n              </ul>\r\n            </div>\r\n            <h4>Développement d’une bibliothèque SMB en Rust</h4>\r\n            <p className=\"tabulation\">Contrairement à CrackMapExec (CME) qui pouvait compter sur la bibliothèque SMB en Python d’Impacket, Rust étant un langage relativement récent, il n’y a pas de bibliothèque SMB déjà exitante. La principale difficulté a donc été la réimplémentation from scratch du protocole SMB en Rust. Il s’agissait de comprendre le protocole, les mécanismes de gestion de l’authentification sous Windows et de recrafter chaque paquet pour effectuer telle ou telle action.</p>\r\n            <div>SMB (Server Message Block) est le protocole des partages Windows, il inclut notamment :  \r\n              <ul>\r\n                <li>L’accès aux Partages réseau (shares)</li>\r\n                <li>La gestion des imprimantes </li>\r\n                <li>L’administration de machines distantes </li>\r\n                <li>La lecture et l’écriture de fichiers </li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <p className=\"tabulation\">SMB peut également fonctionner comme protocole de transport avec d’autres protocoles réseau Windows. Par exemple le protocole Windows Remote Procedure Call (DCE RPC) permet la communication interprocess. Les différents processus peuvent être sur la même machine, sur le même réseau local ou même selon la configuration, à travers le net. Cela nous permet donc l’exécution de code à distance, le management de services ou la gestion ou la modification de clés de registres Windows.</p>\r\n            <p>Pour implémenter la 1ère bibliothèque SMB libre en RUST nous nous sommes basés sur Impacket qui en propose déjà une existante en Python et sur la documentation de Microsoft associée au protocole SMB.</p>\r\n            \r\n            <hr/>\r\n\r\n            <h3>Utilisation de l’outil</h3>\r\n            <div className=\"tabulation\">SneakyMercury est un outil en CLI, l’interface offre un shell intéractif. Quand l’utilisateur lance l’outil il accède au menu d’aide lui indiquant les options à fournir (IP cible, nom d’utilisateur, mot de passe, nom de domaine)\r\n    \r\n            → Les commandes shell, script et db sont alors disponibles  \r\n              <ul>\r\n                <li>shell ouvre un shell intéractif avec un menu d’aide plus spécifique</li>\r\n                <li>script permet à un utilisateur de lancer ses propres scripts</li>\r\n                <li>db gère en background une base de données contenant les credentials déjà récupérés (fonctionnalité non implémentée)</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <img id=\"help\" src={Help} alt=\"menu d'aide sneakymercury\"/>\r\n\r\n            <p>L’outil traite l’authentification NTLMv2 et retourne un message de connexion ou d’erreur. L’utilisateur connecté accède alors à la liste des commandes disponibles.</p>\r\n            \r\n            <img id=\"demo\" src={Demo} alt=\"demo sneakymercury\"/>\r\n\r\n            <div>Généralement la commande suivante est « Connect » qui va permettre la connexion à un partage réseau (share). \r\n            \r\n            Par défaut, il y a 3 partages réseau, visibles uniquement par l’administrateur du domaine ou l’administrateur local. Pour pouvoir monter ces partages réseau il faut avoir les droits administrateur sur le système.\r\n            <ul>\r\n              <li>C$ (Disque C)</li>\r\n              <li>ADMIN$ = C:/Windows/</li>\r\n              <li>IPC$</li>\r\n            </ul>\r\n            $=caché\r\n            </div>\r\n\r\n            <p className=\"tabulation\">IPC$ est un partage spécial permettant la communication interprocess. Il ne permet pas d’accéder directement à des fichiers ou des dossiers comme les autres partages réseau mais il fournit une interface de communication avec les autres processus en cours d’exécution sur le système (Remote Procedure Call : DCERPC).  \r\n    \r\n            En fait $IPC expose les named pipes11 sur lesquels on peut alors écrire ou lire pour communiquer avec les processus. Chaque data qui est écrite sur un named pipe est envoyée au processus distant et inversement chaque data écrite par un processus sera accessible à partir du named pipe associé. Une fois connecté au partage réseau l’utilisateur peut lister les fichiers ou se déplacer dans les différents dossiers à la recherche de données sensibles.</p>\r\n\r\n            <h4>Exploration des partages réseau et commandes Powershell </h4>  \r\n            <p>On peut également exécuter des commandes arbitraires sur la cible grâce à la commande PowerShell :</p>    \r\n        \r\n            <img id=\"interactif\" src={Interactive} alt=\"sneakymercury interactif\"/>\r\n\r\n            <h4>Download de fichiers ou upload de codes malveillants</h4>\r\n            <p className=\"tabulation\">La fonctionnalité implémentée suivante est l’Upload/Download de fichiers. Cela peut permettre à l’utilisateur de récupérer les fichiers intéressants en local avec la commande download, ou alternativement d'uploader ses propres fichiers ou exécutables via la commande upload.</p>\r\n\r\n            <p>Pour implémenter cette fonctionnalité nous nous sommes inspirés de l’upload utilisé par CrackMapExec (CME).</p>  \r\n            <ul><strong>Détails upload CME :</strong>\r\n              <li>Première étape, connexion au share où l’on veut uploader (ex : ADMIN$)</li>\r\n              <li>Création d’un fichier (Create Request File) </li>\r\n              <li>Ecriture du fichier, on bufferise les données pour les envoyer en boucle si nécessaire (Write Request)</li> \r\n              <li>Fermeture (Close Request)</li>\r\n            </ul>     \r\n\r\n            <p className=\"tabulation\">Le schéma présente les étapes pour ouvrir un fichier sur la machine distante, y écrire, et le fermer. On fait l’hypothèse qu’une connexion authentifiée est déjà établie avant l’envoi de ces paquets, l’établissement de la session et la connexion au partage réseau ont donc déjà eu lieu :</p>     \r\n\r\n            <p>[Diagramme d'un upload]</p>     \r\n\r\n            <p className=\"tabulation\">La première requête permet la création d'un fichier sur la machine distante. La seconde va initialiser certaines métadonnées du fichier comme sa taille. On envoie des requêtes d’écriture dans lesquelles on bufferise les data à transmettre, et l’on boucle jusqu’à la fin du fichier source. Une dernière requête permet la fermeture du fichier distant. L’upload est alors terminé.</p>\r\n\r\n            <h4>Enumération des utilisateurs, des domaines et des sessions</h4>    \r\n\r\n            <p className=\"tabulation\">Si l’objectif est la reconnaissance locale ou sur le domaine, l’utilisateur peut utiliser les commandes <strong>domains</strong> ou <strong>users</strong>. Elles listent respectivement les domaines auxquels les utilisateurs peuvent se connecter, et les utilisateurs enregistrés. D’autre part si elle est utilisée sur un Contrôleur de Domaine, la commande users peut lister tous les utilisateurs du domaine :  </p> \r\n\r\n            <p>[Diagramme liste users]</p>     \r\n\r\n            <div>Cette fonctionnalité est basée sur le protocole <strong>SAMR</strong> (Security Account Manager Remote) avec les requêtes suivantes :  \r\n              <ol>\r\n                <li>Connect request</li>\r\n                <li>EnumDomains</li>\r\n                <li>LookupDomain</li>\r\n                <li>OpenDomain</li>\r\n                <li>EnumDomainUsers</li>\r\n                <li>OpenUser</li>\r\n                <li>QueryUserInfo2</li>\r\n                <li>Close request </li>\r\n              </ol>\r\n            </div>\r\n\r\n            <p className=\"tabulation\">Une requête va initialiser la connexion, la suivante liste les domaines, on parse alors la réponse pour se concentrer sur un domaine en particulier. On ouvre ce domaine et une requête va réaliser l’énumération des utilisateurs sur celui-ci. Enfin on peut récupérer certaines informations spécifiques à un utilisateur, avant de fermer avec la dernière requête</p>\r\n\r\n            <p>La capture Wireshark ci-dessous présente les requêtes SAMR dans l’ordre logique pour lister les utilisateurs.</p>     \r\n\r\n            <p>[Diagramme wireshark énum users</p>   \r\n\r\n            <p className=\"tabulation\">Pour notre projet nous avons analysé les paquets en utilisant WireShark (logiciel d’écoute passive et de capture de paquets réseau). Afin d’implémenter une action particulière (comme l’énumération des utilisateurs), il faut envoyer au serveur les paquets dans un ordre précis, avec des paramètres corrects et les valeurs correspondantes. On a donc du disséquer le protocole pour comprendre les fonctions des différents paquets ainsi que les effets des différents paramètres.</p>  \r\n            <p>Wireshark et les tests unitaires ont permis de déceler les éventuelles erreurs de valeurs dans les paramètres des paquets ou dans le parsing des réponses. Cette méthodologie pour construire les paquets, les envoyer sur le réseau et parser les réponses, reste valable quelque soit le protocole étudié.</p>\r\n\r\n            <hr/>\r\n\r\n            <h3>Fonctionnalités additionnelles</h3>\r\n            <h4>Windows Remote Code Execution </h4>\r\n\r\n            <div>Plusieurs méthodes sont possibles pour l’exécution de code à distance sous Windows : \r\n              <ul>\r\n                <li>Remote Service Control Manager (Named pipe : svcctl)</li> \r\n                <li>Task Scheduler (atexec)</li>\r\n                <li>Windows Management Instrumentation (WMI)</li>\r\n                <li>Remote Registry</li>\r\n                <li>Remote File Access</li>\r\n                <li>Remote Desktop (RDP)</li>\r\n                <li>Windows Remote Management</li>\r\n                <li>MMC20.Application (DCOM) </li>\r\n              </ul>\r\n            </div>\r\n\r\n            <p>Ces différentes méthodes sont expliquées dans ce lien :</p> \r\n            <a href=\"https://support.microsoft.com/en-us/help/942817/how-to-change-the-remote-uaclocalaccounttokenfilterpolicy-registry-se\">Méthodes d'exécution de code à distance</a>\r\n\r\n            <p>Pour ce projet l’exécution de code à distance se fait via le protocole <strong>SCMR</strong> (Service Control Manager Remote Protocol) en se basant sur <strong>Psexec</strong> de <strong>SysInternals</strong>.</p>\r\n            \r\n            <p className=\"tabulation\">L’utilisation de commandes internes propres à Windows (légitimes) permet d’éviter d’écrire des fichiers sur le disque (Fileless) donc est une méthode plus discrète pour éviter les détections via des mécanismes comme l’AMSI (Antimalware Scan Interface) ou les sondes IDS</p>\r\n            \r\n            <div>Smb-exec (utilisé par CME) permet également d’exécuter du code sur des hôtes distants. Parmi ses fonctionnalités : \r\n              <ul>\r\n                <li>Dump de hash12 sur les serveurs et machines</li>\r\n                <li>Enregistrement des registres HKLM (HKEY_LOCAL_MACHINE) et de la base SAM (Security Account Manager)</li>\r\n                <li>Recherche de fichiers intéressants (ex : unattended.xml contenant souvent des mots de passe en clair)</li>\r\n              </ul> \r\n            </div>\r\n            {/* TEST  */}\r\n\r\n\r\n              <p>\r\n              Il a également l’avantage d’être peu détecté en comparaison des payloads du framework Metasploit (basé sur psexec de SysInternals). <br/>\r\n    \r\n    \r\n              <a href=\"https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py\">github de smbexec</a>  \r\n              </p>\r\n              <br/>\r\n              <div>\r\n              <strong>Détails de Smb-exec:</strong>\r\n              <ol>\r\n                <li>Première étape, connexion à IPC$ et création svcctl (Create Request)</li>\r\n                <li>Récupération du Context Handle (Open SC Manager Request)</li>\r\n                <li>Création d’un Named service spécifiant la commande à exécuter dans le path du binaire (Create Service Request). Cette commande redirige l'output vers des fichiers temporaires qui seront téléchargés ensuite.</li>\r\n                <li>Démarrage du service (Start Service)</li>\r\n                <li>Lecture de l'output écrite dans le fichier temporaire (Read Request)</li>\r\n                <li>Suppression du service (Delete Service) </li>\r\n                <li>Fermeture de l’handle attribué (Close Handle Request)</li>\r\n              </ol> \r\n              </div>\r\n\r\n              <br/>\r\n\r\n              <p>Psexec (développé par SysInternals), il s’agit d’un outil d’administration à distance de Windows, qui a longtemps été l’outil favori pour tous les mouvements latéraux dans un environnement Active Directory. Il utilise le protocole SMB pour se connecter à une machine distante et y lancer un exécutable. En principe, il crée un « named pipe » qui permet d’exécuter de manière interactive des commandes avec RemComSvc. En réalité il les exécute localement puis exporte les résultats à travers SMB. Bien qu’il soit encore utilisé de manière légitime pour effectuer des tâches d’administration il facilite grandement la tâche aux attaquants. </p>\r\n\r\n              <p>Voici l’explication détaillée tirée du blog rapid7 : ”PSExec has a Windows Service image inside of its executable. It takes this service and deploys it to the Admin share on the remote machine. It then uses the DCE/RPC interface over SMB to access the Windows Service Control Manager API. It turns on the PSExec service on the remote machine. The PSExec service then creates a named pipe that can be used to send commands to the system.” </p>\r\n\r\n              <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/psexec\">Documentation Microsoft Psexec</a><br/>\r\n              <a href=\"https://blog.rapid7.com/2013/03/09/psexec-demystified/\">Explications Psexec additionnelles</a><br/><br/>\r\n\r\n              <strong>Détails des étapes de Psexec : </strong>\r\n              Comparable à Smbexec mais diffère dans le fait qu’il upload toujours un fichier sur la machine distante. \r\n\r\n              <ol>\r\n                <li>Création de psexecsvc.exe sur le share $ADMIN (Create Request File)</li>\r\n                <li>Écriture sur psexcsv de la commande à exécuter sur le fichier local ou des data du binaire à uploader (Write Request) </li>\r\n                <li>Connexion à SCMR via DCERPC (Bind Request)</li>\r\n                <li>Récupération du context handle </li>\r\n                <li>Création du service, chiffré sous Wireshark (Create Service Request)</li>\r\n                <li>Fermeture du service (Close Service Handle Request)</li>\r\n                <li>Commande (Open Service Request)</li>\r\n                <li>Démarrage du service (Start Service Request)</li>\r\n                <li>Requête le statut du service (Query Service Status Request)</li>\r\n                <li>Création de PSEXESVC (Create Request File)</li>\r\n                <li>Récupération d’information (Info Request/ IOCTL Request)</li>\r\n                <li>Écriture des data (Write Request)</li>\r\n                <li>Lecture des data (Read Request)</li>\r\n                <li>Création du fichier pour stdin (Create Request)</li>\r\n                <li>Création du fichier pour stdout (Create Request)</li>\r\n                <li>Création du fichier pour stderr (Create Request)</li>\r\n              </ol>\r\n              Après chaque commande : écriture sur stdin (Write Request) et lecture sur stdout (Read Request) \r\n              <img id=\"flow\" src={Flow} alt=\"flowgraph\" />\r\n\r\n              <h3 id=\"PTH\">Pass The Hash (PTH)</h3>\r\n              <p className=\"tabulation\">L’utilisateur peut également choisir de s’authentifier en utilisant un hash de mot de passe (NTLMv2), cela permet tout ce qui est attaque du type Pass-The-Hash. \r\n              \r\n              Les mécanismes d'authentification sont basés sur un mot de passe que la plupart du temps les utilisateurs ne doivent saisir qu'une seule et unique fois. Ce dernier sera hashé et c’est ce hash qui sera utilisé par la suite.  Ainsi pour un attaquant cela revient au même de connaître la valeur du hash ou bien le mot de passe lui-même. Une attaque Pass-The-Hash facilite grandement les intrusions dans un réseau dans la mesure où même les mots de passe d’une grande complexité peuvent être facilement contournés. \r\n              </p>\r\n              <a href=\"https://www.melani.admin.ch/melani/fr/home/documentation/rapports/rapportstechniques/attaques--pass-the-hash-.html \">documentation pass the hass</a>\r\n              <a href=\"https://attack.stealthbits.com/pass-the-hash-attack-explained \">explications pass the hash</a>\r\n\r\n              <p>Par ailleurs, les attaques Pass-The-Hash sont très difficiles à détecter au niveau du réseau car il est complexe de savoir quel utilisateur devrait être loggué sur telle machine et de pratiquer une politique de sécurité assez fiable pour savoir à tout moment quels comptes ont droit d’accès à telle ressource.</p>\r\n\r\n         <h3>Null Session</h3>\r\n              <p className=\"tabulation\">Il s’agit d’une vulnérabilité classique dans les réseaux Windows qui consiste à se connecter en connexion anonyme à un partage réseau caché IPC$ (share réseau utilisé pour les communications interprocess). Cela permet ainsi de récupérer de nombreuses informations sur la configuration de la machine, les utilisateurs, les noms des partages réseau, et même de modifier des parties du registre de la machine distante.</p>\r\n\r\n              <a href=\"https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/\">lien1</a>\r\n              <a href=\"https://www.beyondsecurity.com/scan_pentest_network_vulnerabilities_null_session_availab lesmb\">lien2</a>\r\n              <a href=\"http://smallvoid.com/article/winnt-null-session.html\">lien3</a>\r\n              <a href=\"https://www.youtube.com/watch?v=VvX7JHzzSA8\">lien4</a>\r\n\r\n              <p>Pour utiliser la nulle session dans notre outil, il faut changer un flag lors de la négociation de session (afin de rendre la connexion anonyme) et supprimer toutes les réponses au challenge.</p>\r\n \r\n              Pour désactiver la nulle session sous Windows, il suffit de modifier le registre comme suit : <br/>\r\n              HKEY\\SYSTEM\\CurrentControlSet\\Control\\Lsa: <br/> \r\n              – RestrictAnonymous = 1 <br/> \r\n              – Restrict AnonymousSAM = 1 <br/>\r\n              – EveryoneIncludesAnonymous = 0 <br/><br/>\r\n\r\n  \r\n              <p>On peut également limiter ses accès aux partages réseau en ajoutant un champ <strong>RestrictNullSessAccess</strong>de valeur 1 dans la clé de registre suivante :<br/>\r\n              <strong style={{'font-size':'9px'}}>HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters</strong>  \r\n              </p>\r\n              \r\n\r\n\r\n              <h3>Bruteforce de mots de passe</h3>\r\n              <p className=\"tabulation\">Pour gérer le bruteforce de mots de passe au niveau de l’authentification SMB on a implémenté l'utilisation d'une liste de noms d’utilisateurs/mots de passe plutôt qu’un mot de passe unique afin de tester l’authentification pour une liste spécifique de cible. \r\n              Lorsque des identifiants valides sont trouvés ils sont automatiquement ajoutés dans la base de données qui devrait à terme recenser tous les identifiants trouvés sur le réseau au cours du pentest, y compris les identifiants dans les fichiers des partages réseaux (ce qui est arrive fréquemment).</p>\r\n\r\n              <h3>EternalBlue, EternalChampion, EternalSynergy et EternalRomance</h3>\r\n              \r\n              MS17-010 contient les exploits développés par la NSA qui ciblent Microsoft Windows, ces exploits ont notamment été ré-implémentés dans les ransomware WannaCry et NotPetya. \r\n\r\n              <ol>\r\n                <li>CVE-2017-0146 (EternalChampion/EternalSynergy) : exploite une race condition avec les Transaction requests</li>\r\n                <li>CVE-2017-0143 (EternalRomance/EternalSynergy) : exploite une confusion de type entre WriteAndX et Transaction requests </li>\r\n              </ol>\r\n\r\n              Sous Metasploit : exploit/windows/smb/ms17_010_psexec\r\n\r\n              <ul>\r\n                <li>1. Le pare feu doit permettre le trafic SMB</li>  \r\n                <li>2. La cible doit utiliser la version du protocole SMBv1</li>  \r\n                <li>3. Il ne doit pas y avoir la mise à jour du patch de la MS17-010</li>  \r\n                <li>4. La connexion anonyme à l’IPC$ et au named pipe doivent être autorisées</li> \r\n              </ul>\r\n\r\n              <img id=\"eternalbluesuccess\" src={EternalblueSuccess} alt=\"exploit eternalblue\"/>\r\n\r\n              <p>EternalBlue ne nécessite pas d’être authentifié. EternalRomance, EternalSynergy et EternalChampion permettent d’obtenir une session administrateur à partir d’un compte aux privilèges limités. \r\n              Dans le cadre du projet, EternalBlue a été implémenté en Rust afin de pouvoir l’intégrer dans l’outil. </p>\r\n\r\n              <h2 id=\"smb\">Protocole Server Message Block (SMB)</h2>\r\n              <h3>Présentation</h3>\r\n              <p>Il existe plusieurs versions de la suite protocolaire Microsoft SMB : SMB 1, SMB 2.0, SMB 2.1, SMB 3.0, SMB 3.0.2, SMB 3.1.1<br/>  Les versions SMB 2.X et SMB 3.X sont assez proches mais radicalement différents de la version SMB1. <br/>Ce projet s’est concentré sur l’implémentation de SMB2.1, le tableau suivant présente les versions du protocole SMB associées aux différents systèmes d’exploitation : </p>\r\n\r\n              <p>SMB peut être implémenté sur le TCP ou via NETBIOS. Ce projet se concentre sur le SMB over TCP (Direct Hosted SMB). Les paquets seront craftés de manière à indiquer que le protocole est lancé over TCP avec un header qui précisera à chaque fois l’action à réaliser et donc la nature des data qui suivent. </p>\r\n\r\n              <p>Pour notre projet nous nous sommes concentrés sur la version SMB2.1 utilisant le header SYNC packets, et uniquement du coté client. Pour se faire nous nous sommes inspirés du client smb d’Impacket ainsi que de la documentation de Windows. </p>\r\n\r\n              <p>En mode sync, un thread lance une opération I/O et entre immédiatement dans une phase d’attente jusqu’à ce que la requête I/O soit achevée. </p>\r\n\r\n              <p>Le header SMB (SYNC) se présente comme suit : </p>\r\n\r\n              [Diagramme header SMB]\r\n \r\n              <ul>\r\n                <li>4 premiers octets : identification du protocole SMB2 SMB2:0x424d53fe </li>\r\n                <li>2 suivants : taille du header</li>\r\n                <li>2 octets : Credit Charge  0x0000 (valeur fournie par le client au serveur et limite le nombre de requêtes exceptionnelles qu’un client peut envoyer au serveur)</li>\r\n                <li>2 octets : Channel Sequence 0x0000</li>\r\n                <li>2 octets : Reserved, 0x0000</li>\r\n                <li>2 octets : Command (l’un des paramètres les plus importants car il décrit le type de paquet qui va être envoyé) </li>\r\n                <li>2 octets : Credits requested </li>\r\n                <li>4 octets : flags<br/>- requête : 0x00000000 <br/>- réponse : 0x00000001</li>\r\n                <li>8 octets : message ID <br/>    - incrémentation à partir de 0 pour chaque requête envoyée <br/> - logique de suivi au niveau paquets de la communication SMB</li>\r\n                <li>4 octets : Process ID - 0x0000feff </li>\r\n                <li>4 octets : Tree ID <br/> - 0x00 jusqu’à la requête tree connect  <br/> \r\n                - 0x01 puis égal à 1 après connexion</li>\r\n                <li>8 octets : Session ID <br/>- 0x00 jusqu’à la requête session setup, après identifie la session</li>\r\n                <li>16 octets : Signature ID <br/>  - utilisé si le paquet est signé </li>\r\n              </ul>\r\n\r\n              <a href=\"https://msdn.microsoft.com/en-us/library/cc246529.aspx\">documentation source</a>\r\n\r\n\r\n              <p>Pour les messages, il a fallu les crafter de zéro en s’inspirant de la documentation Microsoft et du code d’Impacket, voici les différents paquets relatifs au protocole SMB que l’on a pu implémenter au cours du projet : </p>\r\n\r\n              <ul>\r\n                <li>Negotiate: message initial, négociation pour l’authentification</li>\r\n                <li>Session Setup: mécanisme authentification</li>\r\n                <li>Tree Connect/Disconnect: demande de connexion à un Partage réseau</li>\r\n                <li>Logoff: message pour la déconnexion </li>\r\n                <li>Read: message de lecture de data </li>\r\n                <li>Write: message d’écriture de data </li>\r\n                <li>Create: message d’accès/de création/de suppression d’un fichier</li>\r\n                <li>Query Directory: récupération d’information sur un dossier </li>\r\n                <li>Get Info: récupération d’informations sur les fichiers et/ou autres objets </li>\r\n              </ul>\r\n\r\n              Grâce à ces paquets on a ainsi pu implémenter les fonctionnalités suivantes : \r\n\r\n              <ul>\r\n                <li>Ouverture et fermeture d’une connexion SMB </li>\r\n                <li> Authentification (combiné avec l’implémentation Windows GSS-API/NTLMSSP) → Login </li>\r\n                <li>Connexion à un partage réseau </li>\r\n                <li>Liste des partages réseau </li>\r\n                <li>Déplacement dans les dossiers d’un partage </li>\r\n                <li>Upload d’un fichier sur un partage </li>\r\n                <li>Download d’un fichier présent sur un partage </li>\r\n              </ul>\r\n\r\n              <h3>Authentification</h3>\r\n\r\n              Le graphe suivant donne une vue d’ensemble du processus d’authentification SMB2 (login) : \r\n\r\n              [Diagrammme authentification SMB2]\r\n\r\n              <p>Dans le premier paquet le client reçoit le token GSS du serveur. Il s’agit d’un spnego qui est utilisé pour choisir le type d’authentification qui interviendra entre le client et le serveur.</p>\r\n\r\n              <p>SPNEGO est une spécification standard définie dans Simple and Protected GSS-API Negotiation Mechanism, et est en charge de l’authentification permettant l'accès à une ressource sécurisée identifiée dans la requête HTTP.</p>\r\n\r\n              Le spnego inclut les paramètres : \r\n\r\n              <ul>\r\n                <li>mechtypes : qui décrit les mécanismes de sécurité disponibles </li>\r\n                <li>mechtoken : le token relatif à la session </li>\r\n                <li>d’autres informations</li>\r\n              </ul>\r\n\r\n              Dans le cas d’une session NTLM, le client va initier un nouveau spnego en envoyant un spnegoinit et un Negociate message.\r\n\r\n              <a href=\"https://msdn.microsoft.com/en-us/library/cc246561.aspx \">https://msdn.microsoft.com/en-us/library/cc246561.aspx</a>\r\n\r\n              <p className=\"tabulation\">Pour ce qui est du projet l’implémentation a été largement inspirée dans un premier temps par la bibliothèque « WinAuth » en Rust afin de générer le challenge/response nécessaire à l’authentification, mais la décision a été prise par la suite de réécrire ce code afin que cela corresponde davantage à nos besoins. </p>\r\n\r\n              <p>Pour le moment, l’authentification peut être faite localement, sur un contrôleur de domaine, via un mot de passe ou par Pass-The-Hash. Un bruteforce des users/passwords a également été implémenté il suffit de fournir une simple wordlist pour que les identifiants soient testés.</p>\r\n\r\n              <a href=\"https://github.com/steffengy/winauth-rs\">bibliothèque winaut</a>\r\n              <a href=\"http://blog.gentilkiwi.com/tag/ntlm \">Doc NTLM</a>\r\n\r\n              Lors d’une authentification NTLM il y a plusieurs possibilités, elle peut être gérée par : \r\n\r\n              <ul>\r\n                <li>Pas d’authentification (Null authentication)</li>\r\n                <li>LMv1 ou LMv2 : un simple hash de mots de passe clients</li>\r\n                <li>NTLMv1 ou NTLMv2 : incluant un challenge du serveur (protection contre le rejeu) </li>\r\n                <li>NTLM 2 : NTLMV1 amélioré </li>\r\n              </ul>\r\n\r\n              <p className=\"tabulation\">Le choix est laissé au client. Les serveurs les plus anciens peuvent encore accepter LM, c’est pourquoi aujourd’hui la plupart des clients envoie nécessairement les deux, des réponses LM et NTLM. <br/> La configuration spécifique (des clients et des serveurs) dépend de certaines valeurs de clés de registre. Donc il n’y a pas moyen de savoir à l’avance (à l’exception d’une reconnaissance préalable des versions OS ou fingerprinting) quels types de réponses seront acceptées par le serveur. Cela explique pourquoi LM est encore envoyé malgré son faible niveau de sécurité. En particulier le choix entre NTLMv1 et NTLMv2 ne dépend pas des flags négociés. </p>\r\n\r\n              Pour plus de détails voir les liens :\r\n              <a style={{\"font-size\":\"9px\"}} href=\"http://davenport.sourceforge.net/ntlm.html#type3MessageExample\">http://davenport.sourceforge.net/ntlm.html#type3MessageExample</a>\r\n \r\n              <p className=\"tabulation\">NTLM a été largement supplanté par le protocole d’authentification Kerberos pour tout ce qui est authentification dans un domaine. C’est un procédé d’authentification plus moderne et robuste, il nécessite un Ticket Granting Server (TGS) pour fonctionner, généralement sur le Contrôleur de Domaine. Contrairement à NTLM, l’authentification Kerberos est séparée de SMB, et implique des intéractions entre le TGS et le service auquel on essaie d’accéder. Kerberos est stateless, ce qui permet des attaques comme le Golden Ticket. C’est un procédé d’authentification basé sur le schéma en Tiers-de-confiance, il ne peut pas être utilisé dans toutes les situations. Par exemple lorsque les serveurs ne font pas parti du domaine, ou pour des comptes locaux, ou pour l’accès à des ressources sur un domaine non fiable. NTLM continuera encore pour un moment à être le mécanisme d’authentification le plus utilisé. </p>\r\n\r\n              <a href=\"https://blog. https://blog.varonis.fr/explication-de-lauthentificationkerberos/devensys.com/kerberos-principe-de-fonctionnement/\">Principe Kerberos</a>\r\n\r\n              <p>Pour la gestion de l’authentification, le paquet suivant est envoyé pour spécifier les versions SMB supportées par le client, ainsi que d’autres informations (signature requise par exemple) </p>\r\n\r\n              [Diagramme Negociate Request]\r\n\r\n              <p>Dans le paquet Negociate Response, une erreur est retournée si le statut n’est pas STATUT_SUCCESS. Généralement, le serveur envoie un negtokeninit dans un message spnego, et c’est au client de l’accepter ou d’en redemander un nouveau avec une session set up request.</p>\r\n\r\n              <h3>Signature/ Chiffrement</h3>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default SneakyMercury;  "]},"metadata":{},"sourceType":"module"}