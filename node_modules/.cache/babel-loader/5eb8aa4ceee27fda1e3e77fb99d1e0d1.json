{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\hackingfornoobs_frontend\\\\src\\\\components\\\\Pentest.js\";\nimport React from 'react';\n\nclass Pentest extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Qu'est-ce qu'un pentest ?\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"Il s'agit d'un \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"pen\"), \"etration \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"test\"), \" qui consiste \\xE0 se mettre dans la peau d\\u2019un attaquant souhaitant s\\u2019introduire dans le syst\\xE8me d\\u2019information d'une entreprise pour r\\xE9aliser des actions malveillantes (vol, espionnage, sabotage,...).  C'est donc un test d\\u2019intrusion qui vise \\xE0 hacker le r\\xE9seau ou une partie sp\\xE9cifique du r\\xE9seau de mani\\xE8re offensive et plus ou moins r\\xE9aliste pour en remonter les vuln\\xE9rabilit\\xE9s au client afin qu'il puisse les corriger. L\\u2019objectif du pentester est alors multiple et peu varier selon les contextes :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Lister un ensemble d\\u2019informations, trouv\\xE9es d\\u2019une mani\\xE8re ou d\\u2019une autre, et qui peuvent \\xEAtre sensibles ou critiques\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Dresser une liste des vuln\\xE9rabilit\\xE9s ou faiblesses du syst\\xE8me de s\\xE9curit\\xE9 pouvant \\xEAtre exploit\\xE9es\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"D\\xE9montrer qu\\u2019un attaquant potentiel est en capacit\\xE9 de trouver des vuln\\xE9rabilit\\xE9s et de les exploiter pour s\\u2019introduire dans le syst\\xE8me d\\u2019information. Au del\\xE0 des vuln\\xE9rabilit\\xE9s sans relations entre elles, une r\\xE9elle d\\xE9marche vise \\xE0 relever la pr\\xE9sence d\\u2019un plan d\\u2019action amenant de la position d\\u2019un attaquant externe \\xE0 la prise de contr\\xF4le du SI ou la possibilit\\xE9 d\\u2019y effectuer des actions (espionnage, sabotage, etc.)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Tester l\\u2019efficacit\\xE9 des syst\\xE8mes de d\\xE9tection d\\u2019intrusion et la r\\xE9activit\\xE9 de l\\u2019\\xE9quipe de s\\xE9curit\\xE9, et parfois des utilisateurs (social engineering)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Effectuer un reporting et une pr\\xE9sentation finale de son avancement et de ses d\\xE9couvertes au client\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Donner des pistes et conseiller sur les m\\xE9thodes de r\\xE9solution et de correction des vuln\\xE9rabilit\\xE9s d\\xE9couvertes.\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Globalement, il existe deux types de contexte pour l\\u2019ex\\xE9cution d\\u2019un pentest : le pentest en mode Black box et le pentest en mode White Box, et \\xE9galement quelques \\xAB modes \\xBB d\\xE9riv\\xE9s :\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Le pentest en mode Black Box : Dans le contexte Black Box, le pentester se met r\\xE9ellement dans la peau d\\u2019un attaquant externe et commence son test d\\u2019intrusion en ayant le moins d\\u2019information possible sur sa cible (sa cible \\xE9tant alors l\\u2019entreprise ayant demand\\xE9 un pentest). En effet, lorsqu\\u2019un asseyant d\\xE9bute son attaque, il ne dispose pas (ou rarement) de la cartographie compl\\xE8te du SI, de la liste des serveurs avec leurs IP, etc. Le contexte Black Box vise donc \\xE0 trouver et \\xE0 d\\xE9montrer la pr\\xE9sence d\\u2019un plan d\\u2019action exploitable par une personne externe permettant de prendre le contr\\xF4le du syst\\xE8me d\\u2019information ou de mettre la main sur certaines informations. En commen\\xE7ant avec tr\\xE8s peu d\\u2019informations, le pentester doit chercher depuis l\\u2019ext\\xE9rieur comment s\\u2019introduire dans le syst\\xE8me cible, il adopte alors la m\\xE9thodologie et le comportement qu\\u2019aurait un pirate r\\xE9el.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Le pentest en mode White Box : Ici, c\\u2019est exactement l\\u2019inverse. Le pentesteur travail en proche collaboration avec le DSI, le RSSI et l\\u2019\\xE9quipe technique du syst\\xE8me d\\u2019information. Le but est alors d\\u2019obtenir 100% des informations sur le syst\\xE8me d\\u2019information et d\\u2019accompagner la DSI/RSSI dans la d\\xE9tection de vuln\\xE9rabilit\\xE9. Un des avantages du mode White Box est que l\\u2019on peut alors d\\xE9tecter des failles de s\\xE9curit\\xE9 de fa\\xE7on plus large et que le mode Black Box n\\u2019aurait pas permis de d\\xE9celer, par exemple si le pentesteur n\\u2019avait pas atteint un certain stade de l\\u2019intrusion. De plus, le mode White Box s\\u2019int\\xE8gre plus facilement dans le cycle de vie du SI, parfois \\xE0 chaque stade de son \\xE9volution.\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Il existe des d\\xE9riv\\xE9s des modes Black Box / White Box. On peut par exemple s\\u2019int\\xE9resser au mode dit \\xAB Grey Box \\xBB dans lequel le pentester d\\xE9bute son test d\\u2019intrusion avec un nombre limit\\xE9 d\\u2019information, en \\xE9tant par exemple dans la peau d\\u2019un utilisateur du SI. En tant que membre du service comptabilit\\xE9 par exemple, il d\\xE9butera avec un poste dans le LAN, un compte utilisateur valide, l\\u2019acc\\xE8s \\xE0 certaines applications m\\xE9tiers. En revanche il n\\u2019aura pas la permission de demander la version du serveur de mail \\xE0 la DSI, information que la DSI ne donnerait pas \\xE0 un utilisateur lambda. Ici, on peut donc simuler les m\\xE9faits que peut causer un utilisateur au syst\\xE8me de sa propre entreprise \\xE0 partir d\\u2019une position pr\\xE9cise dans le syst\\xE8me d\\u2019information. Le mode Grey Box ne se r\\xE9sume pas qu\\u2019\\xE0 ce contexte, on peut par exemple \\xE9galement imaginer un point de d\\xE9part qui serait la possession par l\\u2019attaquant du compte d\\u2019un utilisateur ayant quitt\\xE9 l\\u2019entreprise mais qui serait toujours valide dans le syst\\xE8me d\\u2019information cible (un compte VPN/AD par exemple). Outre ces diff\\xE9rents contextes de d\\xE9part, il existe \\xE9galement la notion de \\xAB Red Team \\xBB visant \\xE0 simuler ce que l\\u2019on pourrait commencer \\xE0 d\\xE9crire comme une APT (Advanced Persistent Threat). Dans ce contexte Red Team, le test d\\u2019intrusion est \\xE9tendu sur une p\\xE9riode beaucoup plus grande (plusieurs mois au lieu de quelques jours/semaines). Cela refl\\xE8te encore plus fid\\xE8lement le contexte d\\u2019une attaque externe dans laquelle les pirates tendent de plus en plus \\xE0 prendre leur temps pour \\xE9tudier le SI cibl\\xE9 et \\xE9galement pour dissimuler leur pr\\xE9sence.\"));\n  }\n\n}\n\nexport default Pentest;","map":{"version":3,"sources":["C:/Users/Nico/hackingfornoobs_frontend/src/components/Pentest.js"],"names":["React","Pentest","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AAClCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAlB,eAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/C,+iBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gIAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6fAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qMAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mHALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIANJ,CAJF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2NAbF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,w+BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,syBAFJ,CAfF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8xDApBF,CADF;AA+BD;;AAjCiC;;AAoCpC,eAAeF,OAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Pentest extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Qu'est-ce qu'un pentest ?</h1>\r\n          <hr/>\r\n          <p>Il s'agit d'un <strong>pen</strong>etration <strong>test</strong> qui consiste à se mettre dans la peau d’un attaquant souhaitant s’introduire dans le système d’information d'une entreprise pour réaliser des actions malveillantes (vol, espionnage, sabotage,...).  C'est donc un test d’intrusion qui vise à hacker le réseau ou une partie spécifique du réseau de manière offensive et plus ou moins réaliste pour en remonter les vulnérabilités au client afin qu'il puisse les corriger. L’objectif du pentester est alors multiple et peu varier selon les contextes :</p>\r\n          <ul>\r\n              <li>Lister un ensemble d’informations, trouvées d’une manière ou d’une autre, et qui peuvent être sensibles ou critiques</li>\r\n              <li>Dresser une liste des vulnérabilités ou faiblesses du système de sécurité pouvant être exploitées</li>\r\n              <li>Démontrer qu’un attaquant potentiel est en capacité de trouver des vulnérabilités et de les exploiter pour s’introduire dans le système d’information. Au delà des vulnérabilités sans relations entre elles, une réelle démarche vise à relever la présence d’un plan d’action amenant de la position d’un attaquant externe à la prise de contrôle du SI ou la possibilité d’y effectuer des actions (espionnage, sabotage, etc.)</li>\r\n              <li>Tester l’efficacité des systèmes de détection d’intrusion et la réactivité de l’équipe de sécurité, et parfois des utilisateurs (social engineering)</li>\r\n              <li>Effectuer un reporting et une présentation finale de son avancement et de ses découvertes au client</li>\r\n              <li>Donner des pistes et conseiller sur les méthodes de résolution et de correction des vulnérabilités découvertes.</li>\r\n          </ul>\r\n\r\n          <p>Globalement, il existe deux types de contexte pour l’exécution d’un pentest : le pentest en mode Black box et le pentest en mode White Box, et également quelques « modes » dérivés :</p>\r\n\r\n          <ul>\r\n              <li>Le pentest en mode Black Box : Dans le contexte Black Box, le pentester se met réellement dans la peau d’un attaquant externe et commence son test d’intrusion en ayant le moins d’information possible sur sa cible (sa cible étant alors l’entreprise ayant demandé un pentest). En effet, lorsqu’un asseyant débute son attaque, il ne dispose pas (ou rarement) de la cartographie complète du SI, de la liste des serveurs avec leurs IP, etc. Le contexte Black Box vise donc à trouver et à démontrer la présence d’un plan d’action exploitable par une personne externe permettant de prendre le contrôle du système d’information ou de mettre la main sur certaines informations. En commençant avec très peu d’informations, le pentester doit chercher depuis l’extérieur comment s’introduire dans le système cible, il adopte alors la méthodologie et le comportement qu’aurait un pirate réel.</li>\r\n              <li>Le pentest en mode White Box : Ici, c’est exactement l’inverse. Le pentesteur travail en proche collaboration avec le DSI, le RSSI et l’équipe technique du système d’information. Le but est alors d’obtenir 100% des informations sur le système d’information et d’accompagner la DSI/RSSI dans la détection de vulnérabilité. Un des avantages du mode White Box est que l’on peut alors détecter des failles de sécurité de façon plus large et que le mode Black Box n’aurait pas permis de déceler, par exemple si le pentesteur n’avait pas atteint un certain stade de l’intrusion. De plus, le mode White Box s’intègre plus facilement dans le cycle de vie du SI, parfois à chaque stade de son évolution.</li>\r\n          </ul>\r\n\r\n          <p>Il existe des dérivés des modes Black Box / White Box. On peut par exemple s’intéresser au mode dit « Grey Box » dans lequel le pentester débute son test d’intrusion avec un nombre limité d’information, en étant par exemple dans la peau d’un utilisateur du SI. En tant que membre du service comptabilité par exemple, il débutera avec un poste dans le LAN, un compte utilisateur valide, l’accès à certaines applications métiers. En revanche il n’aura pas la permission de demander la version du serveur de mail à la DSI, information que la DSI ne donnerait pas à un utilisateur lambda.\r\n\r\n          Ici, on peut donc simuler les méfaits que peut causer un utilisateur au système de sa propre entreprise à partir d’une position précise dans le système d’information. Le mode Grey Box ne se résume pas qu’à ce contexte, on peut par exemple également imaginer un point de départ qui serait la possession par l’attaquant du compte d’un utilisateur ayant quitté l’entreprise mais qui serait toujours valide dans le système d’information cible (un compte VPN/AD par exemple).\r\n\r\n          Outre ces différents contextes de départ, il existe également la notion de « Red Team » visant à simuler ce que l’on pourrait commencer à décrire comme une APT (Advanced Persistent Threat). Dans ce contexte Red Team, le test d’intrusion est étendu sur une période beaucoup plus grande (plusieurs mois au lieu de quelques jours/semaines). Cela reflète encore plus fidèlement le contexte d’une attaque externe dans laquelle les pirates tendent de plus en plus à prendre leur temps pour étudier le SI ciblé et également pour dissimuler leur présence.</p>\r\n\r\n\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Pentest;"]},"metadata":{},"sourceType":"module"}